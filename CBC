4
Option Explicit
Option Compare Database

#If VBA7 Then
    Private Declare PtrSafe Function OpenProcess Lib "kernel32" _
                                 (ByVal dwDesiredAccess As Long, _
                                  ByVal bInheritHandle As Long, _
                                  ByVal dwProcessId As Long) As Long
    
    
    Private Declare PtrSafe Function GetExitCodeProcess Lib "kernel32" _
                                        (ByVal hProcess As Long, _
                                         lpExitCode As Long) As Long
    
    
    Private Declare PtrSafe Function GetUserName Lib "advapi32.dll" Alias "GetUserNameA" _
                                        (ByVal lpBuffer As String, nSize As Long) As Long
                                        
    Private Declare PtrSafe Sub K32Sleep Lib "kernel32" Alias "Sleep" (ByVal lngMilliSeconds As Long)
#Else
    Private Declare Function OpenProcess Lib "kernel32" _
                                 (ByVal dwDesiredAccess As Long, _
                                  ByVal bInheritHandle As Long, _
                                  ByVal dwProcessId As Long) As Long
    
    
    Private Declare Function GetExitCodeProcess Lib "kernel32" _
                                        (ByVal hProcess As Long, _
                                         lpExitCode As Long) As Long
    
    
    Private Declare Function GetUserName Lib "advapi32.dll" Alias "GetUserNameA" _
                                        (ByVal lpBuffer As String, nSize As Long) As Long
                                        
    Private Declare Sub K32Sleep Lib "kernel32" Alias "Sleep" (ByVal lngMilliSeconds As Long)
                                        
#End If

Dim db As Connection
Dim dbCRL As Connection
Dim db21 As Connection
Dim fso As FileSystemObject
Dim strUsername As String
Dim crlf As String
Dim PathZipProgram As String
Dim sqlActiveJobs As String
Dim sqlPausedJobs As String
Dim sqlErroredJobs As String
Dim sqlWaitingJobs As String
Dim sqlCompletedJobs As String
Dim sqlCurrentTasks As String
Dim sqlProcessDetail As String
Dim sqlJobMI As String
Dim sqlHandlers As String
Dim sqlHandlerQueue As String
Dim sqlJobTasks As String
Dim sqlJobStatusMessage As String
Dim sqlJobNumberSearch As String

'CBC 052 MB21 Migration - added hardcoded paths to SQL config table
Dim ScriptFolder As String
Dim CRLSchedulerFolder As String
Dim CRLJobsFolder As String
Dim ValJobsFolder As String
Dim ValCobraShareFolder As String
Dim DataTransfersInboundFolder As String
Dim DataInFolder As String
Dim RepeatJobsLink As String

Dim ConnectionStringVal As String
Dim ConnectionStringCRL As String
Dim ConnectionStringDB As String

' CBC 070 - Change provider from MSDASQL.1 to SQLNCLI11 - as the former only works with TLS 1.0 which has been removed from the server
Const ConnectionTemplateVAL = "Provider=SQLNCLI11;Persist Security Info=False;Extended Properties=""DSN=Main;Description=Main Database;APP=Visual Basic;Trusted_Connection=Yes"";server=<ACTIVE_SERVER>;database=BatchWorkflow;driver={SQL Server}"
Const ConnectionTemplateCRL = "Provider=SQLNCLI11;Persist Security Info=False;Extended Properties=""DSN=Main;Description=Main Database;APP=Visual Basic;Trusted_Connection=Yes"";server=<ACTIVE_SERVER>;database=BatchWorkflow;driver={SQL Server}"
Const ConnectionTemplateDB = "Provider=SQLNCLI11;Persist Security Info=False;Extended Properties=""DSN=Main;Description=Main Database;APP=Visual Basic;Trusted_Connection=Yes"";server=<ACTIVE_SERVER>;database=DataBureaudataLoadAudit;driver={SQL Server}"
                                    
Const DnaReportUrl = "http://bidars.cig.local/ReportServer/Pages/ReportViewer.aspx?/Batchworkflow/Business%20MI/SVoC_ClientMI&JobId={JobId}"
Const TrueVisionReportUrl = "http://bidars.cig.local/ReportServer/Pages/ReportViewer.aspx?/Batchworkflow/Business%20MI/TrueVision%20ClientMI&JobId={JobId}"

Const SoftwareVersion = "3.11"

Const PROCESS_QUERY_INFORMATION = &H400
Const STILL_ACTIVE = &H103

Const SendEmailAs = "DataBureau@callcreditgroup.com"

Private Function ProcessPlaceholder(strIn As String, _
    Optional strJobFolder As String, _
    Optional strInputFile As String, _
    Optional strJobID As String) As String
    
    Dim strOut As String
    Dim strUnit As String
    Dim strOffset As String
    Dim dteDate As String
    Dim strOperator As String
    
    strOut = strIn
    
    If Not (Left(strOut, 1) = "[" And Right(strOut, 1) = "]") Then
        Exit Function
    End If
    
    If InStr(strIn, "(") > 0 And InStr(strIn, ")") > InStr(strIn, "(") Then
    
        ' Drop the square brackets
        strOut = Mid(strOut, 2, Len(strOut) - 2)
        
        strUnit = Left(strOut, InStr(strOut, "(") - 1)
        
        If strUnit = "LASTMONTH" Then
            strUnit = "-" & CStr(CInt(DatePart("d", Date))) & "d"
        ElseIf strUnit = "TODAY" Then
            strUnit = "+0d"
        End If
        
        If Left(strUnit, 1) = "-" Then
            strOperator = "-"
        ElseIf Left(strUnit, 1) = "+" Then
            strOperator = "+"
        Else
            ProcessPlaceholder = strIn
            Exit Function
        End If
        strUnit = Right(strUnit, Len(strUnit) - 1)
        
        While IsNumeric(Left(strUnit, 1))
            strOffset = strOffset & Left(strUnit, 1)
            strUnit = Right(strUnit, Len(strUnit) - 1)
        Wend
        
        If strOperator = "-" Then strOffset = "-" & strOffset
        
        ' Trim strOut down to the dateformat string
        strOut = Mid(strOut, InStr(strOut, "(") + 1)
        strOut = Left(strOut, Len(strOut) - 1)
        
        ' Calculate the date to use for the replacements
        dteDate = DateAdd(strUnit, CDbl(strOffset), Date)
        
        ' Replace the datepart placeholders
        strOut = Replace(strOut, "yyyy", DatePart("yyyy", dteDate), , , vbBinaryCompare)
        strOut = Replace(strOut, "yy", Right(DatePart("yyyy", dteDate), 2), , , vbBinaryCompare)
        strOut = Replace(strOut, "q", DatePart("q", dteDate), , , vbBinaryCompare)
        strOut = Replace(strOut, "MMMM", MonthName(DatePart("m", dteDate), False), , , vbBinaryCompare)
        strOut = Replace(strOut, "MMM", MonthName(DatePart("m", dteDate), True), , , vbBinaryCompare)
        strOut = Replace(strOut, "MM", Right("0" & DatePart("m", dteDate), 2), , , vbBinaryCompare)
        strOut = Replace(strOut, "dd", Right("0" & DatePart("d", dteDate), 2), , , vbBinaryCompare)
        strOut = Replace(strOut, "HH", Right("0" & DatePart("h", dteDate), 2), , , vbBinaryCompare)
        strOut = Replace(strOut, "mm", Right("0" & DatePart("n", dteDate), 2), , , vbBinaryCompare)
        strOut = Replace(strOut, "ss", Right("0" & DatePart("s", dteDate), 2), , , vbBinaryCompare)
        If DatePart("h", dteDate) >= 12 Then
            strOut = Replace(strOut, "tt", "PM", , , vbBinaryCompare)
        Else
            strOut = Replace(strOut, "tt", "AM", , , vbBinaryCompare)
        End If
        
    End If
    
    If UCase(strOut) = "[JOBFOLDER]" And Not IsMissing(strJobFolder) Then strOut = strJobFolder
    If UCase(strOut) = "[INPUTFILE]" And Not IsMissing(strInputFile) Then strOut = strInputFile
    If UCase(strOut) = "[JOBID]" And Not IsMissing(strJobID) Then strOut = strJobID
    
    ProcessPlaceholder = strOut
    
End Function

Private Function ProcessPlaceholders(strInString As String, Optional strJobFolder As String, Optional strInputFile As String) As String
    Dim strOutString
    Dim strPlaceHolder As String
    Dim intPos As Integer
    Dim intPos2 As Integer
    
    intPos = 1
    
    intPos2 = InStr(strInString, "[")
    
    Do While intPos2 > 0
    
        ' Read up to the start of the placeholder
        strOutString = strOutString & Mid(strInString, intPos, intPos2 - intPos)
        intPos = intPos2
        
        intPos2 = InStr(intPos, strInString, "]")
        
        If intPos2 > 0 Then
        
            strPlaceHolder = Mid(strInString, intPos, (intPos2 - intPos) + 1)
            
            strPlaceHolder = ProcessPlaceholder(strPlaceHolder, strJobFolder, strInputFile)
            
            strOutString = strOutString & strPlaceHolder
            
            intPos = intPos2
        
        Else
            ' If there is no closing character, read the rest of the string
            
            strOutString = strOutString & Mid(strInString, intPos)
            intPos = Len(strInString) + 1
            
        End If
        
        intPos2 = InStr(intPos, strInString, "[")
        intPos = intPos + 1
    
    Loop
    
    ' Read any remaining text
    strOutString = strOutString & Mid(strInString, intPos)
    
    ProcessPlaceholders = strOutString
    
End Function

Private Sub AddFileToExistFolBtn_Click()

'CBC 058 Adhoc file receipt checks

Dim lngFileID As Long
Dim strSQL As String
Dim Filename As String
Dim FileFolder As String
Dim FiletoCopy As String
Dim fso As Object
Dim ManuallySelectedFolderCRL As String
Dim ManuallySelectedFolderVal As String
Dim CRLJobsFolder As String
Dim ValJobsFolder As String

Set fso = CreateObject("Scripting.FileSystemObject")

If Not IsNull(FileListTable.Value) Then
    lngFileID = FileListTable.Value
    Filename = Nz(DLookup("Filename", "dbo_vw_CobraFilesToDisplay", "SourceFileID = " & Str(lngFileID)))
    FileFolder = Nz(DLookup("Folder", "dbo_vw_CobraFilesToDisplay", "SourceFileID = " & Str(lngFileID)))
    FiletoCopy = FileFolder & Filename
    ValJobsFolder = "\\valwinlvapp030\bsbappend$\Jobs\"
    CRLJobsFolder = "\\crlwinlvapp037\bsbappend$\Jobs\"
    If MsgBox("Are you sure you want to copy the file" & vbCrLf & FileFolder & Filename & " ?", vbYesNo) = vbYes Then
    
        ManuallySelectedFolderCRL = SelectFolder(CRLJobsFolder)
        ManuallySelectedFolderVal = SelectFolder(ValJobsFolder)
    
    ' Asking on which enviroment users wants to add a Parameter Form
    
        If MsgBox("Existing Job is on VAL?", vbYesNo) = vbYes Then
            MsgBox ("Open Val enviroment")
            If ManuallySelectedFolderVal <> "" Then
                fso.CopyFile Source:=FiletoCopy, Destination:=ManuallySelectedFolderVal
                MsgBox ("File was copied")
            Else
                MsgBox ("File failed to be copied")
                Exit Sub
            End If
            'Asking if it's the right location, if yes then calling function ( need to create from code in ht bottom)
            'if no then open folder list to select
        Else
            If MsgBox("Existing Job is on CRL?", vbYesNo) = vbYes Then
                MsgBox ("Open CRL enviroment")
                If ManuallySelectedFolderCRL <> "" Then
                    fso.CopyFile Source:=FiletoCopy, Destination:=ManuallySelectedFolderCRL
                    MsgBox ("File was copied")
                Else
                    MsgBox ("File failed to be copied")
                Exit Sub
                End If
            End If
        End If
    End If
End If

End Sub


Private Sub btn_ClearParameterFormDetails_Click()

lblPFStatus.Caption = ""
lblPFClientName.Caption = ""
lblPFName.Caption = ""
lblPFJobNumber.Caption = ""
lblPFRequestType.Caption = ""
lblPFInputFolder.Caption = ""
lblPFInputFile.Caption = ""
lblPFInputRecords.Caption = ""
lblPFMatchedFolder.Caption = ""
lblPFMatchedFileName.Caption = ""
lblPFMatchedRecords.Caption = ""
lblPFInputFileStatus.Caption = ""

setupJobVALBtn.Enabled = False
setupJobCRLBtn.Enabled = False
RejectFormBtn.Enabled = False

End Sub

Private Sub btn_ParameterFormDetails_Click()

Dim FilePicker      As FileDialog
Dim pickedfile As Boolean
Dim SelectedFile As String

Dim Filename As String
Dim folderName As String
Dim SubmissionStatus As String
Dim FormName As String
Dim JobNumber As String
Dim ClientName As String
Dim RequestVersion As String
Dim InputFilePath As String
Dim InputFileName As String
Dim InputVolume As String


Dim xlbSource As Workbook
Dim xlsSource As Worksheet



Set FilePicker = Application.FileDialog(msoFileDialogFilePicker)

FilePicker.AllowMultiSelect = False
FilePicker.Filters.Add "Excel", "*.xls*", 1
FilePicker.InitialFileName = "\\valdotcssvm011\backoffice_shares$\DataOperations\DODB\Cobra\ParameterForms"
FilePicker.Title = "Please Select the Excel Data..."
FilePicker.Show

If FilePicker.SelectedItems.Count <> 0 Then

SelectedFile = FilePicker.SelectedItems(1)
    
Filename = Right(SelectedFile, Len(SelectedFile) - InStrRev(SelectedFile, "\"))
folderName = Replace(SelectedFile, Filename, "")

End If

Set xlbSource = Workbooks.Open(SelectedFile, , True)
Set xlsSource = xlbSource.Worksheets("BSB & TrueVision Parameter Form")

lblPFMatchedFolder.Caption = folderName
lblPFMatchedFileName.Caption = Filename

SubmissionStatus = xlsSource.[Submission_Status]
ClientName = xlsSource.[ClientName]
FormName = xlsSource.[Job_Description]
JobNumber = xlsSource.[JobNumber]
RequestVersion = xlsSource.[RequestVersion]
InputFilePath = xlsSource.[InputFilePath]
InputFileName = xlsSource.[InputFileName]
InputVolume = xlsSource.[InputVolume]

lblPFStatus.Caption = SubmissionStatus
lblPFClientName.Caption = ClientName
lblPFName.Caption = FormName
lblPFJobNumber.Caption = JobNumber
lblPFRequestType.Caption = RequestVersion
lblPFInputFolder.Caption = InputFilePath
lblPFInputFile.Caption = InputFileName
lblPFInputRecords.Caption = InputVolume


End Sub

Private Sub btn_RefreshParameterFormListTable_Click()

Call ParameterFormListTable_Initialize

End Sub


'Private Sub BrowseFileBtn_Click()
''CBC 058 Adhoc file receipt checks
'    Dim fd As Office.FileDialog
'    Set fd = Application.FileDialog(msoFileDialogFilePicker)
'    Dim sourceName As String
'    Dim sourceFile As String
'    Dim sourceFolder As String
'
'    With fd
'        .AllowMultiSelect = False
'        .Title = "Select File to Setup"
'        .Filters.Clear
'        .Filters.Add "Text and Delimited files", "*.*?"
'
'        .InitialFileName = "\\cig.local\data\Marketing Solutions Departments\Production\Data In\"
'        If .Show = True Then
'            sourceName = .SelectedItems(1)
'        End If
'    End With
'
'    If Len(sourceName) = 0 Then
'        Exit Sub
'    End If
'
'    sourceFolder = Left(sourceName, InStrRev(sourceName, "\"))
'    sourceFile = Replace(sourceName, sourceFolder, "")
'    lblPFMatchedFileName.Caption = sourceFile
'    lblPFMatchedFolder.Caption = sourceFolder
'    setupJobBtn.Enabled = True
'End Sub

Private Sub cboDispatchMonthlyJob_Change()
    Dim dbCurrent As DAO.Database
    Dim rstJob As DAO.Recordset
    Dim strDispatchFolder As String
    
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    Set dbCurrent = CurrentDb
    
    Set rstJob = dbCurrent.OpenRecordset("SELECT [COBRA - Repeat Jobs].* FROM [COBRA - Repeat Jobs] WHERE [Job Number]='" & cboDispatchMonthlyJob.Value & "';")
    
    lblDispatchFolder.Caption = "<Not Found>"
    
    If Not rstJob.EOF Then
        txtDispatchJobNo.SetFocus
        txtDispatchJobNo.Text = rstJob("Job Number")
        If Not IsNull(rstJob("Refresh")) Then
            If rstJob("Refresh") = "All" Then
                'CBC 051 set the placeholder depending on the Job Output Naming convention from Sharepoint
                If InStr(rstJob("Output Location"), "[TODAY(yyyyMMdd)]") > 0 Then
                    txtDispatchJobNo.Text = txtDispatchJobNo.Text & "_" & ProcessPlaceholder("[TODAY(yyyyMMdd)]")
                ElseIf InStr(rstJob("Output Naming Convention"), "[TODAY(yyyyMM)]") > 0 Then
                    txtDispatchJobNo.Text = txtDispatchJobNo.Text & "_" & ProcessPlaceholder("[TODAY(yyyyMM)]")
                Else
                    txtDispatchJobNo.Text = txtDispatchJobNo.Text & "_" & ProcessPlaceholder("[TODAY(yyyyMMdd)]")
                End If
            Else
                'If the refresh is not set to All
                txtDispatchJobNo.Text = txtDispatchJobNo.Text & "_" & ProcessPlaceholder("[TODAY(yyyyMM)]")
            End If
        End If
        txtDispatchClient.SetFocus
        txtDispatchClient.Text = rstJob("Client")
        txtDispatchTo.SetFocus
        txtDispatchTo.Text = rstJob("CM/Consultant")
        If Not IsNull(rstJob("Output Location")) Then
            strDispatchFolder = ProcessPlaceholders(rstJob("Output Location"))
            'CBC 051
'            If fso.FolderExists(ProcessPlaceholders(rstJob("Output Location"))) Then
            If fso.FolderExists(strDispatchFolder) Then
                lblDispatchFolder.Caption = strDispatchFolder
            End If
        End If
    End If
    
    txtDispatchCc.SetFocus
    txtDispatchCc.Text = "DataBureau@transunion.co.uk;"
    
    rstJob.Close
End Sub
Private Sub cboJob_Change()
    Dim dbCurrent As DAO.Database
    Dim rstJob As DAO.Recordset
    Dim rstTemplateDir As ADODB.Recordset
    Dim rstActiveJobs As ADODB.Recordset
    Dim objFolder As Folder
    Dim objTempFile As File
    Dim objFile As File
    Dim objTempFolder As Folder
    Set dbCurrent = CurrentDb
    Dim strInputLocation As String
    Dim strInputFilename As String
    Dim objRegex As RegExp
    Dim AppendConfigName As String
    Dim TemplateFolder As String
    Dim AppendConfigPath As String
    Dim xmlConfig As Object
    Dim ApacsValue As String
    Dim RetroDateTypeValue As String
    
    Form_Status.Status = "Getting details from Sharepoint..."
    Form_Status.Visible = True
    lstBatchedConfigs.Visible = False
    DoEvents
    
    ' Clear any existing values
    txtTemplateFolder.SetFocus
    txtTemplateFolder.Text = ""
    txtReformatConfig.SetFocus
    txtReformatConfig.Text = ""
    txtAppendConfig.SetFocus
    txtAppendConfig.Text = ""
    txtScriptPath.SetFocus
    txtScriptPath.Text = ""
    lblRefresh.Caption = ""
'    lblBatchedJob.Caption = ""
    
    cmbRetroDate.Visible = False
    cmdRetroOK.Visible = False
    cmdRetroCancel.Visible = False
        
    ' Get information from the table which is linked to Sharepoint
    Set rstJob = dbCurrent.OpenRecordset("SELECT [COBRA - Repeat Jobs].* FROM [COBRA - Repeat Jobs] WHERE [Job Number]='" & cboJob.Value & "';")
' Get the template directory from the configuration table - CBC 070 - Change to use Cobra _Config
    Set rstTemplateDir = New ADODB.Recordset
    rstTemplateDir.Open "SELECT ConfigValue FROM [dbo].[Cobra_Config] WHERE ConfigItem = 'Cobra Template Directory';", db21
    
    rstJob.MoveLast
    rstJob.MoveFirst
    
    ' If there are multiple results, can't proceed
    If rstJob.RecordCount < 1 Then
        MsgBox ("The selected job number could not be found in the Sharepoint list.")
        GoTo Sub_Error
    End If
    ' If there are multiple results, can't proceed
    If rstJob.RecordCount > 1 Then
        MsgBox ("The job details cannot be loaded because there are multiple entries in the Sharepoint list with this job number.")
        GoTo Sub_Error
    End If
    
'    ' Display if a Batched Job
'CBC 051
'    If IsNull(rstJob("Batched Job")) Then
'            lblBatchedJob.Caption = "No"
'    Else
'            lblBatchedJob.Caption = rstJob("Batched Job")
'    End If
'
    ' Display input notes from Sharepoint
'    txtInputNotes.SetFocus
    'CBC 051
'    If Not IsNull(rstJob("Input Notes")) Then txtInputNotes.Text = rstJob("Input Notes")
    ' Display setup notes from Sharepoint
    txtSetupNotes.SetFocus
    If Not IsNull(rstJob("Setup Notes")) Then txtSetupNotes.Text = rstJob("Setup Notes")
    ' Display workstream from Sharepoint
    cboType.SetFocus
    If Not IsNull(rstJob("Workstream")) Then cboType.Value = rstJob("Workstream")
    ' Display priority from Sharepoint
    txtPriority.SetFocus
    If Not IsNull(rstJob("Priority")) Then txtPriority.Text = CStr(CInt(rstJob("Priority")))
    ' Display input location from Sharepoint
    If Not IsNull(rstJob("File Location")) Then lblInputLocation.Caption = rstJob("File Location")
    ' Display input naming convention from Sharepoint
    If Not IsNull(rstJob("Input Naming Convention")) Then lblInputConvention.Caption = rstJob("Input Naming Convention")
    
    If Not IsNull(rstJob("File Location")) Then
        strInputLocation = ProcessPlaceholders(rstJob("File Location"))
        If Not Left(strInputLocation, Len(ValCobraShareFolder)) = ValCobraShareFolder Then
            strInputLocation = ""
        End If
    Else
        strInputLocation = ""
    End If
    If Not IsNull(rstJob("Input Naming Convention")) Then
        strInputFilename = ProcessPlaceholders(rstJob("Input Naming Convention"))
    Else
        strInputFilename = ""
    End If
    
    'CBC 049 Creation of a Retro Template for BSB Repeat Jobs
    If Not IsNull(rstJob("Refresh")) Then lblRefresh.Caption = rstJob("Refresh")
    
    Form_Status.Status = "Searching for template folder..."
    DoEvents
    
    ' Attempt to find a single template folder which begins with the selected job number
    If fso.FolderExists(rstTemplateDir("ConfigValue")) Then
        For Each objTempFolder In fso.GetFolder(rstTemplateDir("ConfigValue")).SubFolders
            If Left(objTempFolder.Name, Len(rstJob("Job Number")) + 1) = rstJob("Job Number") & "_" Then
                If objFolder Is Nothing Then
                    Set objFolder = objTempFolder
                Else
                    Set objFolder = Nothing
                    Exit For
                End If
            End If
        Next
        If Not objFolder Is Nothing Then
            txtTemplateFolder.SetFocus
            txtTemplateFolder.Text = objFolder.Path
            cmdSelectReformatConfig.Enabled = True
            cmdSelectAppendConfig.Enabled = True
            cmdSelectScript.Enabled = True
        Else
            cmdSelectReformatConfig.Enabled = False
            cmdSelectAppendConfig.Enabled = False
            cmdSelectScript.Enabled = False
        End If
    End If
    Form_Status.Status = "Searching for input file..."
    DoEvents
    ' Attempt to identify input file
    If fso.FolderExists(strInputLocation) Then
        strInputFilename = Replace(strInputFilename, "\", "\\")
        strInputFilename = Replace(strInputFilename, ".", "\.")
        strInputFilename = Replace(strInputFilename, "(", "\(")
        strInputFilename = Replace(strInputFilename, ")", "\)")
        strInputFilename = Replace(strInputFilename, "+", "\+")
        strInputFilename = Replace(strInputFilename, "?", ".")
        strInputFilename = Replace(strInputFilename, "*", ".+")
        strInputFilename = "^" & strInputFilename & "$"
        
        Set objRegex = New RegExp
        objRegex.Pattern = strInputFilename
        objRegex.IgnoreCase = True
        
        For Each objTempFile In fso.GetFolder(strInputLocation).Files
            'If objTempFile.Name = strInputFilename Then
            If objRegex.Test(objTempFile.Name) Then
                If objFile Is Nothing Then
                    Set objFile = objTempFile
                Else
                    Set objFile = Nothing
                    Exit For
                End If
            End If
        Next
        
        Set objRegex = Nothing
    End If
    txtInputFile.SetFocus
    If Not objFile Is Nothing Then
        txtInputFile.Text = objFile.Path
    Else
        txtInputFile.Text = "<Not Found>"
    End If
    
    If Not objFolder Is Nothing Then
        Form_Status.Status = "Searching for configs..."
        DoEvents
        ' If a template folder was found, attempt to find reformat config, append config and script
        Call FindFilesInTemplate(objFolder.Path)
    End If
    
    ' If any details were not found, make this clear
    txtTemplateFolder.SetFocus
    If txtTemplateFolder.Text = "" Then txtTemplateFolder.Text = "<Not Found>"
    txtReformatConfig.SetFocus
    If txtReformatConfig.Text = "" Then txtReformatConfig.Text = "<Not Found>"
    txtAppendConfig.SetFocus
    If txtAppendConfig.Text = "" Then txtAppendConfig.Text = "<Not Found>"
    txtScriptPath.SetFocus
    If txtScriptPath.Text = "" Then txtScriptPath.Text = "<Not Found>"

    Form_Status.Status = "Checking credentials..."
    DoEvents
    rstTemplateDir.Close
    Dim strUsername As String
    
    strUsername = rstJob("Credentials")
    
    If Trim(strUsername) = "Default" Or Trim(strUsername) = "CallCredit Cobra, Cobra Batch User" Then
        ' Default credentials or credit marketing credentials, so no risk of conflict
    ElseIf Trim(strUsername) = "" Then
        ' No credentials stored for this job, so issue a warning
        MsgBox ("Warning : The Sharepoint list does not contain credentials for this job. Please find the credentials in the config file, update Sharepoint, and ensure no other jobs are currently running with these credentials.")
    ElseIf Not InStr(strUsername, ",") > 0 Then
        ' The credentials field doesn't contain a comma, so not sure how to parse this
        MsgBox ("The console could not determine the username from the Sharepoint list. Please ensure the credentials are entered correctly.")
    Else
        ' Trim the credentials down to the username
        strUsername = Trim(Mid(strUsername, InStr(strUsername, ",") + 1))
        
        Dim strConfig As String
        Dim strJobFolder As String
        Dim strTempUsername As String
        Dim strPotentialConflicts As String
        strPotentialConflicts = ""
        
        ' Get a list of jobs which are currently in progress in VAL
        Set rstActiveJobs = New ADODB.Recordset
        Call rstActiveJobs.Open("SELECT JobId, COALESCE(JobNumber,'') AS JobNumber, Data, CASE [Status] WHEN 0 THEN 'Started' WHEN 1 THEN 'Paused' WHEN 2 THEN 'Stopped' WHEN 3 THEN 'Complete' WHEN 4 THEN 'Error' WHEN 5 THEN 'Waiting' ELSE 'Unknown ('+CAST([Status] AS VARCHAR)+')' END [Status] FROM dbo.Job WHERE DATEDIFF(DAY,StartDate,GETDATE()) < 2 AND [Status] IN (0,1,4,5) AND CHARINDEX('""CobraConfigurationFile"":',Data) > 0;", db)
        
        Do While Not rstActiveJobs.EOF
            ' Get the config file path
            strConfig = Json_GetContent(rstActiveJobs("Data"), "CobraConfigurationFile")
            If UCase(Left(strConfig, 12)) = "CONFIGFILES\" Then
                ' If it's a Cobra Monthly template, we also need to determine the job folder and prefix the config path with it
                strJobFolder = Json_GetContent(rstActiveJobs("Data"), "TemplateFolder")
                If Right(strJobFolder, 1) = "\" Then strJobFolder = Left(strJobFolder, Len(strJobFolder) - 1)
                Do While InStr(strJobFolder, "\") > 0
                    strJobFolder = Mid(strJobFolder, InStr(strJobFolder, "\") + 1)
                Loop
                strJobFolder = ProcessPlaceholders(strJobFolder)
                strJobFolder = ValJobsFolder & strJobFolder & "\"
                strConfig = strJobFolder & strConfig
            End If
            
            ' If we can't find the config, we need the user to investigate
            If Not fso.FileExists(strConfig) Then
                strPotentialConflicts = strPotentialConflicts & PadWithChars(rstActiveJobs("JobId"), 7) & rstActiveJobs("JobNumber") & vbCrLf
                GoTo NextJob
            End If
            
            ' Get the username from the config
            strTempUsername = GetUsernameFromConfig(fso.GetFile(strConfig))
            
            ' If no username found, no conflict
            If IsNull(strTempUsername) Then GoTo NextJob
            
            ' If the username matches the current job username, add it to the warning
            If strTempUsername = strUsername Then
                strPotentialConflicts = strPotentialConflicts & PadWithChars(rstActiveJobs("JobId"), 7) & PadWithChars(rstActiveJobs("JobNumber"), 25) & strTempUsername & vbCrLf
            End If
NextJob:
            rstActiveJobs.MoveNext
        Loop
        
        If strPotentialConflicts <> "" Then
            strPotentialConflicts = PadWithChars("JobId", 7) & PadWithChars("JobNumber", 25) & "Username" & vbCrLf & strPotentialConflicts
            strPotentialConflicts = "Warning : There are jobs in progress on VAL which may have the same credentials :" & vbCrLf & vbCrLf & strPotentialConflicts
            strPotentialConflicts = strPotentialConflicts & vbCrLf & "Please ensure there is no risk of these jobs conflicting before submitting this job on the VAL environment."
            MsgBox (strPotentialConflicts)
        End If
        
    End If
    
    'CBC 039 Give warning if apacs is on and retro type is current date at the end of the month
    'Get path for append config xml
    txtAppendConfig.SetFocus
    AppendConfigName = txtAppendConfig.Text
    txtTemplateFolder.SetFocus
    TemplateFolder = txtTemplateFolder.Text
    If Not Trim(AppendConfigName) = "<Not Found>" Then
        AppendConfigPath = Trim(TemplateFolder) & "\" & Trim(AppendConfigName)
        'Read append config file
        Set xmlConfig = CreateObject("Msxml2.DOMDocument.3.0")
        xmlConfig.Load AppendConfigPath

        ' CBC 067 - Add a check to see if the node exists first to avoid errors on BSB 5.0
        'Check if apacs is on
        Dim FindNode As Object
        Set FindNode = xmlConfig.SelectSingleNode("/RetroServiceConfig/SystemConfig/BSBGenerator/CallReport/GeneralBSBSettings/APACS")
        If FindNode Is Nothing Then
            ApacsValue = "false"
        Else
            ApacsValue = LCase(FindNode.Text)
        End If
            
        ' CBC 067 - Add a check to see if the node exists first to avoid errors on BSB 5.0
        'Check if retro date is set to current
        Set FindNode = xmlConfig.SelectSingleNode("/RetroServiceConfig/RetroBasics/AccountManagementDetails/RetroDateType")
        If FindNode Is Nothing Then
            RetroDateTypeValue = "currentdate"
        Else
            RetroDateTypeValue = LCase(FindNode.Text)
        End If

        'Give warning if conditions are true
        If ApacsValue = "true" And RetroDateTypeValue = "CurrentDate" Then
            MsgBox "Warning: APACS is set to Yes, please ensure this job finishes processing before 23:59pm on the last day of the current month"
        End If
    End If
    
Sub_Error:

    Form_Status.Visible = False
    
    
End Sub

Private Sub FindFilesInTemplate(strTemplateFolder As String)
    Dim objFile As File
    Dim objTempFile As File
    
    If Right(strTemplateFolder, 1) <> "\" Then strTemplateFolder = strTemplateFolder & "\"
    
    If fso.FolderExists(strTemplateFolder & "ConfigFiles") Then
        ' If there is a config files folder in the template
        
        ' Attempt to find a single file in the config files folder which ends with '_reformat.config'
        For Each objTempFile In fso.GetFolder(strTemplateFolder & "ConfigFiles").Files
            If LCase(Right(objTempFile.Name, 16)) = "_reformat.config" Then
                If objFile Is Nothing Then
                    Set objFile = objTempFile
                Else
                    Set objFile = Nothing
                    Exit For
                End If
            End If
        Next
        If Not objFile Is Nothing Then
            txtReformatConfig.SetFocus
            txtReformatConfig.Text = "ConfigFiles\" & objFile.Name
        End If
        
        ' Attempt to find a single file in the config files folder which ends with '_append.config'
        Set objFile = Nothing
        For Each objTempFile In fso.GetFolder(strTemplateFolder & "ConfigFiles").Files
            If LCase(Right(objTempFile.Name, 13)) = "append.config" Then
                If InStr(LCase(objTempFile.Name), "_retro_") > 0 Then
                    ' ignore retro's
                ElseIf objFile Is Nothing Then
                    Set objFile = objTempFile
                Else
                    Set objFile = Nothing
                    Exit For
                End If
            End If
        Next
        If Not objFile Is Nothing Then
            txtAppendConfig.SetFocus
            txtAppendConfig.Text = "ConfigFiles\" & objFile.Name
        End If
        
        ' Attempt to find a 'Run.bat' file in the config files folder
        If fso.FileExists(strTemplateFolder & "ConfigFiles\Run.bat") Then
            txtScriptPath.SetFocus
            txtScriptPath.Text = "ConfigFiles\Run.bat"
        End If
    End If
End Sub

'Private Sub cmbClear_Click()
''Me.Text551 = ""
'Me.List549.Requery
'Me.Text551.SetFocus
'End Sub


'Private Sub cmbTask_AfterUpdate()
'Refresh
'Me.cmbMessage = ""
'Me.txtCause = ""
'Me.txtSolution = ""
'Me.txtErrorMessage = ""
'Me.Text593 = ""
'End Sub



Private Sub cmdActiveJobs_Click()

    lstActiveJobs.ColumnWidths = "1.2cm;1.2cm;4cm;6cm;1.5cm;1.5cm;1.3cm;2cm;1.3cm;1.503cm;1.4cm;1.4cm;1.503cm;4cm"
    lstActiveJobs.ColumnCount = 14

    Call PopulateMyList(sqlActiveJobs, lstActiveJobs, "dbo.BWF_CompleteJobs", "JobId")

End Sub

'Private Sub cmdAddToQC_Click()
'    Dim varItems() As Variant
'    Dim varItem As Variant
'    Dim intIndex As Integer
'    Dim blnChanges As Boolean
'
'    intIndex = 0
'
'    If lstQCCompletedJobs.ItemsSelected.Count < 1 Then Exit Sub
'
'    ' Get a list of selected indexes and add each record to the dispatch list
'    txtQCJobNo.SetFocus
'    For Each varItem In lstQCCompletedJobs.ItemsSelected
'        ReDim Preserve varItems(0 To intIndex)
'        varItems(intIndex) = varItem
'        intIndex = intIndex + 1
'        lstQC.AddItem (lstQCCompletedJobs.Column(0, varItem) & ";" & lstQCCompletedJobs.Column(1, varItem))
'        ' If the job number is not already populated, use this job number
'        If txtQCJobNo.Text = "" Then
'            txtQCJobNo.Text = lstQCCompletedJobs.Column(1, varItem)
'        End If
'    Next
'
'    ' Sort the list in descending order
'    Do
'        blnChanges = False
'        For intIndex = 1 To UBound(varItems)
'            If varItems(intIndex) > varItems(intIndex - 1) Then
'                varItem = varItems(intIndex)
'                varItems(intIndex) = varItems(intIndex - 1)
'                varItems(intIndex - 1) = varItem
'                blnChanges = True
'            End If
'        Next
'    Loop Until blnChanges = False
'
'    ' Remove each selected item from the completed job list
'    For Each varItem In varItems
'        lstQCCompletedJobs.RemoveItem (varItem)
'    Next
'End Sub

Private Sub cmdAdhocDispatchClear_Click()

    Me.txtAdhocJobDispatch = ""
    Me.txtAdhocJobDispatchClient = ""
    Me.txtAdhocJobDispatchAppendType = ""
    Me.txtAdhocJobDispatchTo = ""
    Me.txtAdhocJobDispatchCC = ""
    lblAdhocOutputLocation.Caption = "<Not Found>"
    lstAdhocShare = ""
    lstAdhocOwngroup = ""

End Sub

Private Sub cmdAdhocDispatchSelectFolder_Click()


    Dim rstTemplateDir As ADODB.Recordset
    Dim objFolder As Folder
    Dim objTempFolder As Folder
    Dim objFile As File
    Dim objTempFile As File
    Dim objDialog As FileDialog
    
    Set objDialog = Application.FileDialog(msoFileDialogFolderPicker)
    objDialog.AllowMultiSelect = False
    objDialog.Title = "Select Dispatch Folder"
    objDialog.ButtonName = "Select"
    If fso.FolderExists(ValCobraShareFolder) Then
        objDialog.InitialFileName = ValCobraShareFolder
    End If
    objDialog.Show
    If objDialog.SelectedItems.Count > 0 Then
        lblAdhocOutputLocation.Caption = objDialog.SelectedItems.item(1)
    End If
    
End Sub

Private Sub cmdCheckApacs_Click()
    Dim rstConfig As ADODB.Recordset
    Dim strJobFolder As String
    Dim strConfigFile As String
    Dim strAPACS As String
    
    Set rstConfig = New ADODB.Recordset
    Call rstConfig.Open("SELECT Data FROM BatchWorkflow.dbo.Job WHERE JobId = " & CStr(lblJobDetailID.Caption) & ";", db)
    
    strConfigFile = Json_GetContent(rstConfig("Data"), "CobraConfigurationFile")
    
    If UCase(Left(strConfigFile, 12)) = "CONFIGFILES\" Then
        ' If it's a Cobra Monthly template, we also need to determine the job folder and prefix the config path with it
        strJobFolder = Json_GetContent(rstConfig("Data"), "TemplateFolder")
        If Right(strJobFolder, 1) = "\" Then strJobFolder = Left(strJobFolder, Len(strJobFolder) - 1)
        Do While InStr(strJobFolder, "\") > 0
            strJobFolder = Mid(strJobFolder, InStr(strJobFolder, "\") + 1)
        Loop
        strJobFolder = ProcessPlaceholders(strJobFolder)
        strJobFolder = ValJobsFolder & strJobFolder & "\"
        strConfigFile = strJobFolder & strConfigFile
    End If
    
    rstConfig.Close
    
    If Not fso.FileExists(strConfigFile) Then
        MsgBox ("Error : Could not find config file")
        Exit Sub
    End If
    
    strAPACS = GetParameterFromConfig(fso.GetFile(strConfigFile), "Apacs")
    
    If IsNull(strAPACS) Then
        MsgBox ("Apacs is not turned on for this job.")
        Exit Sub
    End If
    If strAPACS = "False" Then
        MsgBox ("Apacs is not turned on for this job.")
        Exit Sub
    End If
    
    Set rstConfig = New ADODB.Recordset
    
    Call rstConfig.Open("SELECT MIN(T.StartDate) AS StartDate, MAX(T.EndDate) AS EndDate " & _
        "FROM dbo.Process P " & _
            "INNER JOIN dbo.Task T " & _
                "ON P.ProcessId = T.ProcessId " & _
        "WHERE P.JobId = " & CStr(lblJobDetailID.Caption) & " " & _
            "AND T.Handler = 'CobraHandler' " & _
            "AND T.StartDate IS NOT NULL " & _
            "AND T.EndDate IS NOT NULL;", db)
    
    If rstConfig.EOF Then
        MsgBox ("No Cobra tasks have been processed for this job")
        Exit Sub
    End If
    
    If IsNull(rstConfig("StartDate")) Or IsNull(rstConfig("EndDate")) Then
        MsgBox ("No Cobra tasks have been processed for this job")
        Exit Sub
    End If
    
    If DateDiff("M", rstConfig("StartDate"), rstConfig("EndDate")) > 0 Then
        MsgBox ("The outputs of this job are invalid, because APACS is turned on and the job processed over the end of a month")
    Else
        MsgBox ("This job did not process over the end of a month, so has not been impacted by the APACS issue.")
    End If
    
    rstConfig.Close
    
End Sub

Private Sub cmdClearDispatchForm_Click()
    Call ClearDispatchForm
End Sub
Private Sub cmdCompletedJobs_Click()

lstActiveJobs.ColumnWidths = "1.51cm;1.2cm;4cm;1.51cm;2cm;2cm;2cm;1.503cm;1.503cm;2cm;1.503cm;1.503cm"
lstActiveJobs.ColumnCount = 13

Call PopulateMyList(sqlCompletedJobs, lstActiveJobs, "", "")

End Sub

Private Sub cmdCopyInputFile_Click()
    txtInputFile.SetFocus
    DoCmd.RunCommand acCmdCopy
End Sub

Private Sub cmdCopyType_Click()
    cboType.SetFocus
    DoCmd.RunCommand acCmdCopy
End Sub

Private Sub cmdCopyPriority_Click()
    txtPriority.SetFocus
    DoCmd.RunCommand acCmdCopy
End Sub

Private Sub cmdCopyTemplateFolder_Click()
    txtTemplateFolder.SetFocus
    DoCmd.RunCommand acCmdCopy
End Sub

Private Sub cmdCopyReformatConfig_Click()
    txtReformatConfig.SetFocus
    DoCmd.RunCommand acCmdCopy
End Sub

Private Sub cmdCopyAppendConfig_Click()
    txtAppendConfig.SetFocus
    DoCmd.RunCommand acCmdCopy
End Sub

Private Sub cmdCopyScriptPath_Click()
    txtScriptPath.SetFocus
    DoCmd.RunCommand acCmdCopy
End Sub

'Private Function GetCRLQueueFilename(strAppServer As String) As String
'    Dim strQueueFilename As String
'
'    strQueueFilename = "CobraSchedule_" & CStr(CrlServerNumber(strAppServer)) & ".txt"
'
'    If strQueueFilename = "CobraSchedule_0.txt" Then
'        MsgBox ("Error : Server name not recognized")
'        strQueueFilename = ""
'    End If
'
'    Select Case strAppServer
'        Case "CRLWINLVAPP008"
'            strQueueFilename = "CobraSchedule_1.txt"
'        Case "CRLWINLVAPP009"
'            strQueueFilename = "CobraSchedule_2.txt"
'        Case "CRLWINLVAPP010"
'            strQueueFilename = "CobraSchedule_3.txt"
'        Case "CRLWINLVAPP011"
'            strQueueFilename = "CobraSchedule_4.txt"
'        Case "CRLWINLVAPP012"
'            strQueueFilename = "CobraSchedule_5.txt"
'        Case "CRLWINLVAPP013"
'            strQueueFilename = "CobraSchedule_6.txt"
'        Case ""
'            strQueueFilename = ""
'        Case Else
'            MsgBox ("Error : Server name not recognized")
'            strQueueFilename = ""
'    End Select
'    GetCRLQueueFilename = strQueueFilename
'End Function

'Private Function GetCRLLogFilename(strAppServer As String) As String
'    Dim strLogFilename As String
'
'    strLogFilename = "CobraLog_" & CStr(CrlServerNumber(strAppServer)) & ".txt"
'
'    If strLogFilename = "CobraSchedule_0.txt" Then
'        MsgBox ("Error : Server name not recognized")
'        strLogFilename = ""
'    End If
'
''    Select Case strAppServer
''        Case "CRLWINLVAPP008"
''            strLogFilename = "CobraLog_1.txt"
''        Case "CRLWINLVAPP009"
''            strLogFilename = "CobraLog_2.txt"
''        Case "CRLWINLVAPP010"
''            strLogFilename = "CobraLog_3.txt"
''        Case "CRLWINLVAPP011"
''            strLogFilename = "CobraLog_4.txt"
''        Case "CRLWINLVAPP012"
''            strLogFilename = "CobraLog_5.txt"
''        Case "CRLWINLVAPP013"
''            strLogFilename = "CobraLog_6.txt"
''        Case Else
''            MsgBox ("Error : Server name not recognized")
''            strLogFilename = ""
''    End Select
'    GetCRLLogFilename = strLogFilename
'End Function

Private Sub SetupJobFolder(JobFolderRoot As String)
    
    Dim strTemplateFolder As String
    Dim strJobFolder As String
    Dim objJobFolder As Folder
    Dim strInputFilename As String
    Dim objFile As File
    Dim objInStream As TextStream
    Dim objOutStream As TextStream
    Dim strTempFilename As String
    Dim Result As Boolean
    Dim BatchedJob As Boolean
    
    Result = True
    Form_Status.Status = "Checking..."
    Form_Status.Visible = True
    DoEvents
        
    ' determine if this is a Batched Job (Kiwi, Define or Core)
'    If lblBatchedJob.Caption = "Yes" Then
'        BatchedJob = True
'    Else
'        BatchedJob = False
'    End If
        
    ' Validate we have everything we need
    If Result Then
        txtTemplateFolder.SetFocus
        If txtTemplateFolder.Text = "" Then
            MsgBox ("Select a template folder first")
            Result = False
        Else
            strTemplateFolder = txtTemplateFolder.Text
            
            If Not fso.FolderExists(strTemplateFolder) Then
                MsgBox ("Could not access template folder")
                Result = False
            End If
        End If
    End If
            
    If Result Then
        strJobFolder = JobFolderRoot & ProcessPlaceholders(fso.GetFolder(strTemplateFolder).Name)
    
        txtInputFile.SetFocus
        strInputFilename = txtInputFile.Text
        Do While InStr(strInputFilename, "\") > 0
            strInputFilename = Mid(strInputFilename, InStr(strInputFilename, "\") + 1)
        Loop
    
        ' Check the input file exists or the folder for multi-run jobs
        If BatchedJob Then
            If Not fso.FolderExists(lblInputLocation.Caption) Then
                MsgBox ("Input Location Not Found")
                Result = False
            End If
        Else
            If Not fso.FileExists(strInputFilename) Then
                MsgBox ("Input file could not be found")
                Result = False
            End If
        End If
    End If
    
    ' Check the folder doesn't already exist on the Target Server
    If Result Then
        If fso.FolderExists(strJobFolder) Then
            MsgBox ("Job folder already exists")
            Result = False
        End If
    End If
        
    If Result Then
        Form_Status.Status = "Copying template folder..."
        DoEvents
    
        ' Copy the template to the jobs folder
        On Error Resume Next
        Call fso.CopyFolder(strTemplateFolder, strJobFolder)
        If Err Then
            MsgBox ("Failed to copy template folder : " & Err.Description)
            Result = False
        End If
        On Error GoTo 0
    End If
    
    If Result Then
        Set objJobFolder = fso.GetFolder(strJobFolder)
        
        Form_Status.Status = "Replacing tags..."
        DoEvents
        
        ' Replace tags in the job folder
        Result = ReplaceTags(fso.GetFolder(strJobFolder), strJobFolder, strInputFilename)
        
        Form_Status.Status = "Creating Configs for each Input File..."
        DoEvents
        ' If this is a Multi Run Job then duplicate the append config for each input file
        If BatchedJob Then
            Call GenerateMultipleConfigs(strJobFolder, lblInputLocation.Caption, lblInputConvention.Caption)
        End If
    End If

    Form_Status.Visible = False
    
End Sub

Sub GenerateMultipleConfigs(JobFolder As String, InputFolder As String, InputNamingConvention As String)
' this process is designed for jobs like Kiwi, Core and Define where we have multiple input files and need to generate multiple configs from
' one original
' Process reads through the file list and creates a config for each input file.

Dim BaseConfig As String
Dim CurrentInputFile As String
Dim BatchNumber As Integer
Dim Result As Integer

' Get the config and check we have one, and only one, available
BaseConfig = Dir(JobFolder & "\ConfigFiles\*.config")
If Len(Trim(Dir())) > 0 Then
    MsgBox ("Multiple Configs found in the job folder, Only one is allowed for Multi-Run Jobs")
    Exit Sub
End If

CurrentInputFile = Dir(InputFolder & InputNamingConvention)
If Len(CurrentInputFile) = 0 Then
    MsgBox ("No Source Files Found")
    Exit Sub
End If

' clear the list of configs
While lstBatchedConfigs.ListCount > 0
    lstBatchedConfigs.RemoveItem (0)
Wend
lstBatchedConfigs.Visible = True

BatchNumber = 1
While Len(CurrentInputFile) > 0
    
    Call CreateNewConfig(JobFolder & "\ConfigFiles\" & BaseConfig, CurrentInputFile, BatchNumber)
    DoEvents
    
    BatchNumber = BatchNumber + 1
    CurrentInputFile = Dir()
Wend

' clear out the base config to avoid it being submitted!
fso.DeleteFile (JobFolder & "\ConfigFiles\" & BaseConfig)

End Sub

Sub CreateNewConfig(BaseConfig As String, InputFile As String, BatchNumber As Integer)

Dim ConfigName As String
Dim Batch As String
Dim sourceFile As String
Dim ConfigIn As TextStream
Dim ConfigOut As TextStream
Dim ReadLine As String

' Duplicate the Config file
Batch = Trim(Str(BatchNumber))
ConfigName = Replace(BaseConfig, "[BATCH]", Batch)

sourceFile = fso.GetFileName(InputFile)

' Replace tags in the config file
Set ConfigIn = fso.OpenTextFile(BaseConfig, ForReading)
Set ConfigOut = fso.CreateTextFile(ConfigName)

While Not ConfigIn.AtEndOfStream
    ReadLine = ConfigIn.ReadLine
    ReadLine = Replace(Replace(ReadLine, "[BATCH]", Batch), "[SOURCE_FILE]", sourceFile)
        
    ConfigOut.WriteLine (ReadLine)
Wend

ConfigIn.Close
ConfigOut.Close

lstBatchedConfigs.AddItem (ConfigName)

End Sub

Private Function ReplaceTags(objFolder As Folder, strJobFolder As String, strInputFile As String) As Boolean
    Dim objSubFolder As Folder
    Dim objFile As File
    Dim objInStream As TextStream
    Dim objOutStream As TextStream
    Dim strReplacedFilename As String
    Dim strExcludeExtensions(0 To 12) As String
    Dim strExt As Variant
    
    strExcludeExtensions(0) = "xls"
    strExcludeExtensions(1) = "xlsx"
    strExcludeExtensions(2) = "xlsm"
    strExcludeExtensions(3) = "doc"
    strExcludeExtensions(4) = "docx"
    strExcludeExtensions(5) = "exe"
    strExcludeExtensions(6) = "zip"
    strExcludeExtensions(7) = "zipx"
    strExcludeExtensions(8) = "7z"
    strExcludeExtensions(9) = "gz"
    strExcludeExtensions(10) = "bz2"
    strExcludeExtensions(11) = "pgp"
    strExcludeExtensions(12) = "gpg"
    
    ' Recurse down through the folder structure
    For Each objSubFolder In objFolder.SubFolders
        If Not ReplaceTags(objSubFolder, strJobFolder, strInputFile) = True Then
            GoTo ReplaceTags_Error
        End If
    Next
    
    For Each objFile In objFolder.Files
        For Each strExt In strExcludeExtensions
            If Right(objFile.Name, Len(strExt)) = strExt Then GoTo NextFile
        Next
        Form_Status.Status = "Replacing tags in '" & objFile.Name & "'..."
        DoEvents
        strReplacedFilename = ProcessPlaceholders(objFile.Name)
        On Error Resume Next
        Set objInStream = objFile.OpenAsTextStream(ForReading)
        If Err Then
            MsgBox ("Failed to open file for reading (" & objFile.Path & ") : " & Err.Description)
            GoTo ReplaceTags_Error
        End If
        Set objOutStream = fso.CreateTextFile(objFolder.Path & "\" & strReplacedFilename & ".replace")
        If Err Then
            MsgBox ("Failed to open file for writing (" & objFolder.Path & "\" & strReplacedFilename & ".replace) : " & Err.Description)
            GoTo ReplaceTags_Error
        End If
        
        Do While Not objInStream.AtEndOfStream
            objOutStream.WriteLine (ProcessPlaceholders(objInStream.ReadLine, strJobFolder, strInputFile))
            If Err Then
                MsgBox ("An error occurred whilst writing to output stream from input stream : " & Err.Description)
                GoTo ReplaceTags_Error
            End If
        Loop
        
        objInStream.Close
        objOutStream.Close
        objFile.Delete
        If Err Then
            MsgBox ("Failed to remove original file (objFile.name) : " & Err.Description)
            GoTo ReplaceTags_Error
        End If
        fso.GetFile(objFolder.Path & "\" & strReplacedFilename & ".replace").Move (objFolder.Path & "\" & strReplacedFilename)
        If Err Then
            MsgBox ("Failed to rename new file (" & objFolder.Path & "\" & strReplacedFilename & ".replace) : " & Err.Description)
            GoTo ReplaceTags_Error
        End If
NextFile:
    Next
    
ReplaceTags_end:
    ReplaceTags = True
    Exit Function
ReplaceTags_Error:
    ReplaceTags = False
End Function

Private Sub cmdDispatchSelectFolder_Click()
    Dim rstTemplateDir As ADODB.Recordset
    Dim objFolder As Folder
    Dim objTempFolder As Folder
    Dim objFile As File
    Dim objTempFile As File
    Dim objDialog As FileDialog
    
    Set objDialog = Application.FileDialog(msoFileDialogFolderPicker)
    objDialog.AllowMultiSelect = False
    objDialog.Title = "Select Dispatch Folder"
    objDialog.ButtonName = "Select"
    If fso.FolderExists(ValCobraShareFolder) Then
        objDialog.InitialFileName = ValCobraShareFolder
    End If
    objDialog.Show
    If objDialog.SelectedItems.Count > 0 Then
        lblDispatchFolder.Caption = objDialog.SelectedItems.item(1)
    End If
    
End Sub

Private Sub cmdDNAReport_Click()
    
    pgeTrueVisionReport.Visible = False

    pgeDNAReport.Visible = True
    pgeDNAReport.SetFocus
    lblDNAReportID.Caption = lblJobDetailID.Caption
    wbDNAReport.Navigate Replace(DnaReportUrl, "{JobId}", lblDNAReportID.Caption)
End Sub

Private Sub cmdErroredJobs_Click()

lstActiveJobs.ColumnWidths = "1.51cm;1.2cm;4cm;1.51cm;2cm;2cm;2cm;1.503cm;1.503cm;1.503cm;1.503cm"
lstActiveJobs.ColumnCount = 12

Call PopulateMyList(sqlErroredJobs, lstActiveJobs, "dbo.BWF_CompleteJobs", "JobId")

End Sub

Private Sub cmdExcludeFromDispatch_Click()
    Dim varItem As Variant
    Dim strSQL As String
    Dim blnFirstItem As Boolean
    
    If lstCompletedJobs.ItemsSelected.Count < 1 Then Exit Sub
    
    strSQL = "MERGE INTO dbo.BWF_Dispatch AS TARGET USING (VALUES"
    
    blnFirstItem = True
    For Each varItem In lstCompletedJobs.ItemsSelected
        If Not blnFirstItem Then strSQL = strSQL & ", "
        strSQL = strSQL & "(" & lstCompletedJobs.Column(0, varItem) & ", 'Excluded', GETDATE(), CURRENT_USER)"
        blnFirstItem = False
    Next
    strSQL = strSQL & ") AS SOURCE(JobId,[Status],Dts,[User]) ON TARGET.JobId = SOURCE.JobId WHEN NOT MATCHED THEN INSERT (JobId, [Status], Dts,[User]) VALUES (SOURCE.JobId,SOURCE.[Status],SOURCE.Dts,SOURCE.[User]);"
    db21.Execute (strSQL)
    
    Call cmdRefreshJobsToDispatch_Click
    
End Sub

Private Sub cmdExportMI_Click()
    
Dim fd As FileDialog
Dim strPath As String
Dim RootPath As String
Dim JobNumber As String
Dim sql As String

Dim objMIStream As TextStream
Dim intI As Integer
Dim rst As Recordset
    
' set the root location depending on which server the job is on
If UCase(Trim(lbl_JD_Server.Caption)) = "VAL" Then
    RootPath = ValJobsFolder
Else
    RootPath = CRLJobsFolder
End If

' get job_Number which is the next level up
sql = "select JobNumber from BatchWorkflow.dbo.Job where JobId = " & Trim(lblJobDetailID.Caption)

Set rst = New Recordset
rst.Open sql, db, adOpenForwardOnly, adLockReadOnly

If rst.EOF Then
    MsgBox ("Job Number not found")
    rst.Close
    Exit Sub
Else
    JobNumber = Trim(rst("JobNumber"))
    rst.Close
End If
                
' Create the dialog box and setup
Set fd = Application.FileDialog(msoFileDialogSaveAs)

fd.AllowMultiSelect = False
fd.ButtonName = "Export"

' Set the target folder as close as possible
If fso.FolderExists(RootPath & JobNumber & "\ConfigFiles\") Then
    fd.InitialFileName = RootPath & JobNumber & "\ConfigFiles\"
ElseIf fso.FolderExists(RootPath & JobNumber & "\") Then
    fd.InitialFileName = RootPath & JobNumber & "\"
Else
    fd.InitialFileName = RootPath
End If
fd.Title = "Export MI"
fd.Show

If fd.SelectedItems.Count = 1 Then
    strPath = fd.SelectedItems.item(1)
    Set objMIStream = fso.CreateTextFile(strPath)
    For intI = 1 To lstJobMI.ListCount
        objMIStream.Write (lstJobMI.Column(0, intI) & Chr(9) & lstJobMI.Column(1, intI) & vbCrLf)
    Next
    objMIStream.Close
End If

Set fd = Nothing

End Sub

Private Sub cmdFindJob_Click()

Dim JobId As String
Dim sql As String
Dim rst As Recordset

JobId = InputBox("Enter Job ID / Job Number :")

If IsNumeric(JobId) Then
    sql = "select top 1 JobId from dbo.Job where JobId = " & JobId
    
    Set rst = New Recordset
    rst.Open sql, db, adOpenForwardOnly, adLockReadOnly
    
    If Not rst.EOF Then
        
        rst.Close
        
        lblJobDetailID.Caption = JobId
        
        Call PopulateJobDetails(CInt(JobId))
        
        pgJobDetail.SetFocus
    Else
        MsgBox ("Job not Found")
    End If

ElseIf Len(JobId) Then
    
    lstActiveJobs.ColumnWidths = "1.25cm;5cm;2cm;2cm;3cm;3.5cm;3.5cm;1.503cm;1.503cm;1.503cm;3cm;3cm"
    lstActiveJobs.ColumnCount = 12

    Call PopulateMyList(Replace(sqlJobNumberSearch, "<JobNumber>", JobId), lstActiveJobs, "", "")

End If

End Sub

Private Sub cmdFlagJob_Click()

Dim JobId As Integer
Dim sql As String
Dim rst As Recordset

JobId = Val(lblJobDetailID.Caption)

If JobId > 0 Then

    ' check if already inserted
    sql = "select * from dbo.BWF_CompleteJobs where JobId = " & Trim(lblJobDetailID.Caption)

    Set rst = New Recordset
    rst.Open sql, db21, adOpenForwardOnly, adLockReadOnly
    
    If rst.EOF Then
        sql = "insert into dbo.BWF_CompleteJobs (JobId,DTS,Operator) Values ("
        sql = sql & Trim(lblJobDetailID.Caption) & ", getdate(), '" & strUsername & "')"

        db21.Execute (sql)

        MsgBox ("Job Added to Complete List")
    Else
        MsgBox ("Job Already in Complete List")
    End If
    rst.Close
   
End If

End Sub
Private Sub cmdGenerateDispatchEmail_Click()
    
    Dim objOutlook As Object
    Dim objEmail As Object
    'Dim Attach As Outlook.Attachments
    Dim AdhocClient As String
    Dim AdhocStrBody As String
    Dim AdhocManualTo As String
    Dim trueVisionAppend As Boolean
    Dim SHARESelected As String
    Dim OwnGroupSelected As String
    
    Dim DeliveryOutputLocation As String
    Dim DeliveryOutputZip As String
    Dim DeliveryOutputFile As String
    Dim DeliveryOutputRecords As String
    Dim DeliveryRejectFile As String
    Dim DeliveryRejectRecords As String
    Dim DeliveryMIFile As String
    Dim DeliveryAttachment As String
    
    Dim OutputAddrLinks As String
    Dim OutputBAI As String
    Dim OutputCCJ As String
    Dim OutputER As String
    Dim OutputSearches As String
    Dim OutputSHARE As String
    Dim OutputCIFAS As String

    Dim OutputAddrLinksCount As String
    Dim OutputBAICount As String
    Dim OutputCCJCount As String
    Dim OutputERCount As String
    Dim OutputSearchesCount As String
    Dim OutputSHARECount As String
    Dim OutputCIFASCount As String
    Dim InputRecordCount As String
    Dim IsTextFile       As Boolean
    
    Dim OutputLog As String
    Dim JobOutputFolder As String
    Dim JobNumber As String
    Dim outfile As TextStream
    Dim OutputData As String
    Dim OutputInfo() As String
    
    Dim StatsLog As String
    Dim Statsfile As TextStream
    Dim StatsData As String
    Dim StatsInfo() As String
        
    Set objOutlook = CreateObject("Outlook.Application")
    Set objEmail = objOutlook.CreateItem(0)
    
    txtAdhocJobDispatchClient.SetFocus
    AdhocClient = txtAdhocJobDispatchClient.Text
    
    txtAdhocJobDispatch.SetFocus
    If txtAdhocJobDispatch = "" Then
        MsgBox ("A job number must be specified before the job can be dispatched.")
        Exit Sub
    End If

    ' CBC 041a
    txtAdhocJobDispatchAppendType.SetFocus
    If txtAdhocJobDispatchAppendType = "Cobra" Then
        trueVisionAppend = False
    ElseIf txtAdhocJobDispatchAppendType = "TrueVision" Then
        trueVisionAppend = True
    Else
        MsgBox ("Append Type not identified - Support Required")
        Exit Sub
    End If
       
    lstAdhocShare.SetFocus
    SHARESelected = UCase(lstAdhocShare)
    
    lstAdhocOwngroup.SetFocus
    OwnGroupSelected = UCase(lstAdhocOwngroup)
       
    If SHARESelected = "" Then
        MsgBox ("SHARE data option (Yes - internal, No - Not Required or for client use) must be specified before the job can be dispatched.")
        Exit Sub
    End If
    If OwnGroupSelected = "" Then
        MsgBox ("Owngroup data option (Yes - all portfolios included, No - not all portfolios included) must be specified before the job can be dispatched.")
        Exit Sub
    End If
        
    ' read the text file created by the post processing script which containts the dispacth file details
    
    JobNumber = txtAdhocJobDispatch.Value
    
    
    If fso.FileExists(ValJobsFolder & JobNumber & "\LogFiles\" & JobNumber & "_Output.log") Then
        OutputLog = ValJobsFolder & JobNumber & "\LogFiles\" & JobNumber & "_Output.log"
        JobOutputFolder = ValJobsFolder & JobNumber & "\OutputFiles\"
    ElseIf fso.FileExists(CRLJobsFolder & JobNumber & "\LogFiles\" & JobNumber & "_Output.log") Then
        OutputLog = CRLJobsFolder & JobNumber & "\LogFiles\" & JobNumber & "_Output.log"
        JobOutputFolder = CRLJobsFolder & JobNumber & "\OutputFiles\"
    Else
        MsgBox "Unable to find Output log on CRL or VAL", vbCritical, txtQCJobNo.Caption
        Exit Sub
    End If
    
    ' read in the details for the output
    Set outfile = fso.OpenTextFile(OutputLog, ForReading)
    While Not outfile.AtEndOfStream
        OutputData = outfile.ReadLine
    Wend
    
    OutputInfo = Split(OutputData, "|")
           
    DeliveryOutputLocation = OutputInfo(0)
    DeliveryOutputZip = OutputInfo(1)
    DeliveryOutputFile = OutputInfo(2)
    DeliveryOutputRecords = OutputInfo(3)
    OutputAddrLinks = OutputInfo(4)
    OutputAddrLinksCount = OutputInfo(5)
    OutputBAI = OutputInfo(6)
    OutputBAICount = OutputInfo(7)
    OutputCCJ = OutputInfo(8)
    OutputCCJCount = OutputInfo(9)
    OutputER = OutputInfo(10)
    OutputERCount = OutputInfo(11)
    OutputSearches = OutputInfo(12)
    OutputSearchesCount = OutputInfo(13)
    OutputSHARE = OutputInfo(14)
    OutputSHARECount = OutputInfo(15)
    
    'Need to check if the output is in .csv or .txt
    If InStr(DeliveryOutputFile, ".txt") > 0 Then
        IsTextFile = True
    Else
        IsTextFile = False
    End If
    
    ' CBC 041a - Variation based on Append Type
    If trueVisionAppend Then
    
        DeliveryRejectFile = OutputInfo(16)
        DeliveryRejectRecords = OutputInfo(17)
        DeliveryMIFile = OutputInfo(18)
        DeliveryAttachment = JobOutputFolder & DeliveryMIFile
    Else
        ' COBRA Append
        OutputCIFAS = OutputInfo(16)
        OutputCIFASCount = OutputInfo(17)
        DeliveryMIFile = ""
        DeliveryAttachment = ""
    End If
    
    txtAdhocJobDispatchTo.SetFocus
    If txtAdhocJobDispatchTo = "Not found!" Then
        AdhocManualTo = InputBox("Please enter email receiver", "Send email to:")
        objEmail.To = AdhocManualTo
        If AdhocManualTo = "" Then
            Exit Sub
        End If
    Else
        objEmail.To = txtAdhocJobDispatchTo
    End If
    
    objEmail.CC = txtAdhocJobDispatchCC
    
    Dim objOutlookAccount As Object
    For Each objOutlookAccount In objOutlook.Session.Accounts
        If objOutlookAccount = "DataBureau@transunion.co.uk" Then
            Set objEmail.SendUsingAccount = objOutlookAccount
        End If
    Next
    
    objEmail.SentOnBehalfOfName = "DataBureau@transunion.co.uk"
    objEmail.bodyformat = 2  'HTML
    
    ' CBC 041a
    If trueVisionAppend Then
        objEmail.Subject = txtAdhocJobDispatch & " - " & AdhocClient & " - TrueVision Append - Output Notification"
    Else
        objEmail.Subject = txtAdhocJobDispatch & " - " & AdhocClient & " - BSB Append - Output Notification"
    End If
    
    AdhocStrBody = "<html><body style = ""font-family:calibri,arial,helvetica,sans-serif;font-size:11pt;"">"
    AdhocStrBody = AdhocStrBody & "<p>Hi,</p>"
    AdhocStrBody = AdhocStrBody & "<p>Please find the output for this job available here : "
    AdhocStrBody = AdhocStrBody & "<a href = """ & DeliveryOutputLocation & """>" & DeliveryOutputLocation & "</a>"
    AdhocStrBody = AdhocStrBody & "</p>"
    
    If Not trueVisionAppend Then
        'Cobra doesn't generate Rejects file, need to read Stats file in ConfigFiles
    
        If fso.FileExists(ValJobsFolder & JobNumber & "\ConfigFiles\" & JobNumber & "_Stats.txt") Then
            StatsLog = ValJobsFolder & JobNumber & "\ConfigFiles\" & JobNumber & "_Stats.txt"
        ElseIf fso.FileExists(CRLJobsFolder & JobNumber & "\ConfigFiles\" & JobNumber & "_Stats.txt") Then
            StatsLog = CRLJobsFolder & JobNumber & "\ConfigFiles\" & JobNumber & "_Stats.txt"
        Else
            MsgBox "Unable to find " & JobNumber & "_Stats.txt on CRL or VAL", vbCritical, txtQCJobNo.Caption
            Exit Sub
        End If
        
        ' read in the details for the stats
        Set Statsfile = fso.OpenTextFile(StatsLog, ForReading)
        While Not Statsfile.AtEndOfStream
            StatsData = Statsfile.ReadLine
            If InStr(StatsData, "Number of records rejected") > 0 Then
                DeliveryRejectRecords = Trim(Split(StatsData, "Number of records rejected")(1))
            End If
            If InStr(StatsData, "Reformatter.RecordCount") > 0 Then
                InputRecordCount = Trim(Split(StatsData, "Reformatter.RecordCount")(1))
            ElseIf InStr(StatsData, "Number of input records") > 0 Then
                InputRecordCount = Trim(Split(StatsData, "Number of input records")(1))
            End If
        Wend
        AdhocStrBody = AdhocStrBody & "Number of input records " & InputRecordCount & " <br />"
        AdhocStrBody = AdhocStrBody & "Number of records rejected " & DeliveryRejectRecords & " <br />"
    End If

    
    AdhocStrBody = AdhocStrBody & "<p>Output Zip  File: " & DeliveryOutputZip & ", which contains:</p>"

    If IsTextFile = True Then
        AdhocStrBody = AdhocStrBody & "<p>Output Data File: " & DeliveryOutputFile & " contains " & DeliveryOutputRecords & " records<br />"
    Else
        AdhocStrBody = AdhocStrBody & "<p>Output Data File: " & DeliveryOutputFile & " contains " & DeliveryOutputRecords & " records, including header record<br />"
    End If

    If trueVisionAppend Then
        AdhocStrBody = AdhocStrBody & "Rejects File: " & DeliveryRejectFile & " contains " & DeliveryRejectRecords & " records, including header record<br />"
    End If
    
    'Print Raw file names and their record counts
    If Val(OutputAddrLinksCount) > 1 Then
        If IsTextFile Then
            AdhocStrBody = AdhocStrBody & "Address links File: " & OutputAddrLinks & " contains " & OutputAddrLinksCount & " records<br />"
        Else
            AdhocStrBody = AdhocStrBody & "Address links File: " & OutputAddrLinks & " contains " & OutputAddrLinksCount & " records, including header record<br />"
        End If
    ElseIf Val(OutputAddrLinksCount) = 1 Then
        AdhocStrBody = AdhocStrBody & "Address links File: No records output <br />"
    End If
    
    If Val(OutputBAICount) > 1 Then
        If IsTextFile Then
            AdhocStrBody = AdhocStrBody & "BAI File: " & OutputBAI & " contains " & OutputBAICount & " records<br />"
        Else
            AdhocStrBody = AdhocStrBody & "BAI File: " & OutputBAI & " contains " & OutputBAICount & " records, including header record<br />"
        End If
    ElseIf Val(OutputBAICount) = 1 Then
        AdhocStrBody = AdhocStrBody & "BAI File: No records output <br />"
    End If
    
    If Val(OutputCCJCount) > 1 Then
        If IsTextFile Then
            AdhocStrBody = AdhocStrBody & "CCJ File: " & OutputCCJ & " contains " & OutputCCJCount & " records<br />"
        Else
            AdhocStrBody = AdhocStrBody & "CCJ File: " & OutputCCJ & " contains " & OutputCCJCount & " records, including header record<br />"
        End If
    ElseIf Val(OutputCCJCount) = 1 Then
        AdhocStrBody = AdhocStrBody & "CCJ File: No records output <br />"
    End If
    
    If Val(OutputERCount) > 1 Then
        If IsTextFile Then
            AdhocStrBody = AdhocStrBody & "ER File: " & OutputER & " contains " & OutputERCount & " records<br />"
        Else
            AdhocStrBody = AdhocStrBody & "ER File: " & OutputER & " contains " & OutputERCount & " records, including header record<br />"
        End If
    ElseIf Val(OutputERCount) = 1 Then
        AdhocStrBody = AdhocStrBody & "ER File: No records output<br />"
    End If
    
    If Val(OutputSearchesCount) > 1 Then
        If IsTextFile Then
            AdhocStrBody = AdhocStrBody & "Searches File: " & OutputSearches & " contains " & OutputSearchesCount & " records<br />"
        Else
            AdhocStrBody = AdhocStrBody & "Searches File: " & OutputSearches & " contains " & OutputSearchesCount & " records, including header record<br />"
        End If
    ElseIf Val(OutputSearchesCount) = 1 Then
        AdhocStrBody = AdhocStrBody & "Searches File: No records output<br />"
    End If
    
    If Val(OutputSHARECount) > 1 Then
        If IsTextFile Then
            AdhocStrBody = AdhocStrBody & "SHARE File: " & OutputSHARE & " contains " & OutputSHARECount & " records<br />"
        Else
            AdhocStrBody = AdhocStrBody & "SHARE File: " & OutputSHARE & " contains " & OutputSHARECount & " records, including header record<br />"
        End If
    ElseIf Val(OutputSHARECount) = 1 Then
        AdhocStrBody = AdhocStrBody & "SHARE File: No records output<br />"
    End If
        
    ' CBC 041a
    If trueVisionAppend Then
        AdhocStrBody = AdhocStrBody & "Report File: " & DeliveryMIFile & "</p>"
    Else
    'Cobra append
        If Val(OutputCIFASCount) > 1 Then
            If IsTextFile Then
                AdhocStrBody = AdhocStrBody & "CIFAS File: " & OutputCIFAS & " contains " & OutputCIFASCount & " records<br />"
            Else
                AdhocStrBody = AdhocStrBody & "CIFAS File: " & OutputCIFAS & " contains " & OutputCIFASCount & " records, including header record<br />"
            End If
        ElseIf Val(OutputCIFASCount) = 1 Then
            AdhocStrBody = AdhocStrBody & "CIFAS File: No records output<br />"
        End If
    End If
    
    ' CBC 056 - Add warning message dependent on options selected
    If (SHARESelected = "YES" And OwnGroupSelected = "YES") Then
        AdhocStrBody = AdhocStrBody & "<p><b><body style = ""font-family:calibri,arial,helvetica,sans-serif;font-size:11pt;color:red"">PLEASE NOTE: This data is for Internal Analysis Only and MUST NOT leave the building. These Outputs contains Supplier Name and Account Number information, which cannot be provided to clients under any circumstances.</body></b></p>"
    ElseIf SHARESelected = "YES" Then
        AdhocStrBody = AdhocStrBody & "<p><b><body style = ""font-family:calibri,arial,helvetica,sans-serif;font-size:11pt;color:red"">PLEASE NOTE: This data is for Internal Analysis Only and MUST NOT leave the building.</body></b></p>"
    ElseIf OwnGroupSelected = "YES" Then
        AdhocStrBody = AdhocStrBody & "<p><b><body style = ""font-family:calibri,arial,helvetica,sans-serif;font-size:11pt;color:red"">PLEASE NOTE: This data is for Internal Analysis Only and MUST NOT leave the building. These Outputs contains Supplier Name and Account Number information, which cannot be provided to clients under any circumstances.</body></b></p>"
    End If
        
    AdhocStrBody = AdhocStrBody & "<p>Questions, queries, issues and additional requirements or changes in relation to this job should be directed to the Data Bureau team using Test Track Pro by filling in the ""Complaint Tracking"" section.</p>"
    AdhocStrBody = AdhocStrBody & "<p>Thank you,<br />Data Bureau</p>"
    AdhocStrBody = AdhocStrBody & "</body></html>"
    
    ' CBC 041a - attach report
    If trueVisionAppend Then
        'Set Attach = objEmail.Attachments
        'Attach.Add (DeliveryAttachment)
    End If
    objEmail.HTMLBody = AdhocStrBody
    objEmail.Display
    
    Call cmdAdhocDispatchClear_Click
 
   
End Sub
Private Sub ClearDispatchForm()
        Do While lstDispatch.ListCount > 0
            lstDispatch.RemoveItem (0)
        Loop
        
        cboDispatchMonthlyJob.Value = ""
        
        txtDispatchJobNo.SetFocus
        txtDispatchJobNo.Text = ""
        
        txtDispatchClient.SetFocus
        txtDispatchClient.Text = ""
        
        lblDispatchFolder.Caption = "<Not Found>"
        
        txtDispatchTo.SetFocus
        txtDispatchTo.Text = ""
        
        txtDispatchCc.SetFocus
        txtDispatchCc.Text = ""
        
        Call cmdRefreshJobsToDispatch_Click
End Sub

Private Sub cmdGenerateQCChecksScriptAdHoc_Click()
    Call GenerateQCChecksSASAdHoc
End Sub

Private Sub GenerateRetro()
' CBC 049
    
    Const ForReading = 1
    Const ForWriting = 2
    
    Dim JobLevelSearchDate As String
    Dim AppendConfigPath
    Dim retroConfigPath As String
    Dim retroConfigName As String
    Dim fs As FileSystemObject
    Set fs = New FileSystemObject
    Dim xmlText As String
    Dim TextFile As Object
    Dim xmlText1 As String
    Dim xmlText2 As String
    Dim xmlText3 As String
    Dim ElementSpace As String
    Dim xmlNewText As String
    Dim xmlStart As String
    Dim xmlEnd As String
        
    JobLevelSearchDate = Trim(cmbRetroDate.Value)
    retroConfigName = "ConfigFiles\" & Trim(cboJob.Value) & "_Retro_" & Replace(JobLevelSearchDate, "-", "") & "_Append.config"
    retroConfigPath = txtTemplateFolder.Value & "\" & retroConfigName

    If fs.FileExists(retroConfigPath) Then
        fs.DeleteFile (retroConfigPath)
    End If
                
    'Check the current date
    'Check if job on sharepoint has one refresh
    'Delete the old Append Retro config
    'Date format should be yyyy-MM-dd
    If Len(JobLevelSearchDate) = 0 Then
        MsgBox "No Retro Date selected"
        Exit Sub
    End If
    If lblRefresh.Caption = "false" Or lblRefresh.Caption = "..." Then
        MsgBox "No Job selected, unable to generate retro config"
        Exit Sub
    End If
    AppendConfigPath = txtTemplateFolder.Value & "\" & txtAppendConfig.Value
    If (Not fso.FileExists(AppendConfigPath)) Then
        MsgBox "Template folder doesn't exist or unable to find Append Config, unable to generate Retro config"
        Exit Sub
    ElseIf (lblRefresh.Caption = "All") Then
        MsgBox "Refreshes is set to all, unable to update the Append config to Retro"
        Exit Sub
    End If
      
    Set TextFile = fs.OpenTextFile(AppendConfigPath, ForReading)
    xmlText = TextFile.ReadAll ' myFileText now contains the content of the text file
    TextFile.Close
    
    ' determine the padding and new lines between elements so we can keep it consistent
    xmlStart = "</GeneralBSBSettings>"
    xmlEnd = "<RetroSettings>"

    ' CBC 067 - Check if the RetroSettings Node is present or not, can't continue if missing
    If InStr(xmlText, xmlEnd) = 0 Then
        MsgBox "This Template is non-standard and can't be automatically created into a retro Template, Please convert manually"
    Else
    ElementSpace = Mid(xmlText, InStr(xmlText, xmlStart) + Len(xmlStart))
    ElementSpace = Left(ElementSpace, InStr(ElementSpace, xmlEnd) - 1)
   
    ' split text into 3 sections - retro settings, and the before and after bits
    xmlStart = "<RetroSettings>"
    xmlEnd = "</RetroSettings>"
    xmlText1 = Left(xmlText, InStr(xmlText, xmlStart) - 1)
    xmlText = Mid(xmlText, InStr(xmlText, xmlStart))
    xmlText2 = Left(xmlText, InStr(xmlText, xmlEnd) + Len(xmlEnd))
    xmlText3 = Mid(xmlText, InStr(xmlText, xmlEnd) + Len(xmlEnd) + 1)
    
    ' now update the retro settings
    xmlNewText = xmlStart & ElementSpace & Chr(9) & _
                "<EnableRetros>true</EnableRetros>" & ElementSpace & Chr(9) & _
                 "<JobLevelSearchDate>" & JobLevelSearchDate & "</JobLevelSearchDate>" & ElementSpace & Chr(9) & _
                 "<RollbackDataOneMonth>false</RollbackDataOneMonth>" & ElementSpace & _
                 xmlEnd & Chr(13) & Chr(10)
    
    ' add it all back together
    xmlText = xmlText1 & xmlNewText & xmlText3
    
    ' write away
    Set TextFile = fs.CreateTextFile(retroConfigPath, ForWriting)
    TextFile.Write (xmlText)
    TextFile.Close
    
    ' finally read back the new section for operator verification
    Set TextFile = fs.OpenTextFile(retroConfigPath, ForReading)
    xmlText = TextFile.ReadAll ' myFileText now contains the content of the text file
    TextFile.Close
    
    ' split text into 3 sections - retro settings, and the before and after bits
    xmlStart = "<RetroSettings>"
    xmlEnd = "</RetroSettings>"
    xmlText = Mid(xmlText, InStr(xmlText, xmlStart))
    xmlText = Left(xmlText, InStr(xmlText, xmlEnd) + Len(xmlEnd))
    
    'Set text box to the new append retro config
    txtAppendConfig.SetFocus
    txtAppendConfig.Text = retroConfigName
    
    MsgBox "Append retro template generated successfully into job template folder as " & Replace(retroConfigName, "ConfigFiles\", "") & _
            Chr(13) & Chr(10) & Chr(13) & Chr(10) & "New Retro Settings are:" & Chr(13) & Chr(10) & Chr(13) & Chr(10) & xmlText

End If

End Sub

Private Sub cmdGenerateRetro_Click()
' CBC 049

    Dim Listdate As Date
    Dim Textdate As String
    Dim i As Integer
    Dim list
    Dim listArray
    Dim item

    If Len(cboJob.Value) > 5 Then

        cmbRetroDate.Visible = True
        cmdRetroOK.Visible = True
        cmdRetroCancel.Visible = True
    
     ' clear this list first
        Do While cmbRetroDate.ListCount > 0
            cmbRetroDate.RemoveItem (0)
        Loop
        
        ' populate the list with the last 8 retro dates in reverse order
        ' go back to refresh date before the previous one
        Listdate = PreviousRefresh(Now())
        Listdate = PreviousRefresh(DateAdd("D", -1, Listdate))
        
        For i = 1 To 5
            Textdate = Format(Listdate, "yyyy-MM-dd")
            cmbRetroDate.AddItem Textdate
            
            ' roll back one week
            Listdate = PreviousRefresh(DateAdd("D", -1, Listdate))
        Next i
    End If
    
End Sub

Private Sub cmdListConfigs_Click()
' find job folders which match the selected Job and list any config files found in this job

Dim JobNumber As String
Dim ConfigName As String
Dim FolderList As Object
Dim myfolder As Object

' First clear the list of configs
While lstBatchedConfigs.ListCount > 0
    lstBatchedConfigs.RemoveItem (0)
Wend

JobNumber = strAssign(cboJob.Value)
If Len(Trim(JobNumber)) = 0 Then
    MsgBox ("Please select a job first")
    Exit Sub
End If

' first list all those on VAL
Set FolderList = fso.GetFolder(ValJobsFolder)

For Each myfolder In FolderList.SubFolders
    If Left(myfolder.Name, Len(JobNumber)) = JobNumber Then
        ConfigName = Dir(myfolder.Path & "\ConfigFiles\*.config")
        While Trim(ConfigName) <> ""
            lstBatchedConfigs.AddItem (myfolder.Path & "\" & ConfigName)
            ConfigName = Dir
        Wend
    End If
Next

' finally list all those on CRL
Set FolderList = fso.GetFolder(CRLJobsFolder)

For Each myfolder In FolderList.SubFolders
    If Left(myfolder.Name, Len(JobNumber)) = JobNumber Then
        ConfigName = Dir(myfolder.Path & "\ConfigFiles\*.Config")
        While Trim(ConfigName) <> ""
            lstBatchedConfigs.AddItem (myfolder.Path & "\" & ConfigName)
            ConfigName = Dir
        Wend
    End If
Next

If lstBatchedConfigs.ListCount > 0 Then
    lstBatchedConfigs.Visible = True
Else
    MsgBox ("No Configs Found for this Job Number")
    lstBatchedConfigs.Visible = False
End If

End Sub

'Private Sub cmdNewError_Click()
'
'
'Me.New_Error_Record.Visible = True
'New_Error_Record.SetFocus
'
'
'
'
'End Sub

Private Sub cmdPausedJobs_Click()

lstActiveJobs.ColumnWidths = "1.51cm;1.2cm;3.5cm;4cm;5cm;2cm;2cm;3cm;1.5cm;1.5cm"
lstActiveJobs.ColumnCount = 12

Call PopulateMyList(sqlPausedJobs, lstActiveJobs, "dbo.BWF_CompleteJobs", "JobId")

End Sub

Private Sub cmdAddToDispatch_Click()
    Dim varItems() As Variant
    Dim varItem As Variant
    Dim intIndex As Integer
    Dim blnChanges As Boolean

    intIndex = 0
    
    If lstCompletedJobs.ItemsSelected.Count < 1 Then Exit Sub
    
    ' Get a list of selected indexes and add each record to the dispatch list
    txtDispatchJobNo.SetFocus
    For Each varItem In lstCompletedJobs.ItemsSelected
        ReDim Preserve varItems(0 To intIndex)
        varItems(intIndex) = varItem
        intIndex = intIndex + 1
        lstDispatch.AddItem (lstCompletedJobs.Column(0, varItem) & ";" & lstCompletedJobs.Column(1, varItem))
        ' If the job number is not already populated, use this job number
        If txtDispatchJobNo.Text = "" Then
            txtDispatchJobNo.Text = lstCompletedJobs.Column(1, varItem)
        End If
    Next
    
    ' Sort the list in descending order
    Do
        blnChanges = False
        For intIndex = 1 To UBound(varItems)
            If varItems(intIndex) > varItems(intIndex - 1) Then
                varItem = varItems(intIndex)
                varItems(intIndex) = varItems(intIndex - 1)
                varItems(intIndex - 1) = varItem
                blnChanges = True
            End If
        Next
    Loop Until blnChanges = False
    
    ' Remove each selected item from the completed job list
    For Each varItem In varItems
        lstCompletedJobs.RemoveItem (varItem)
    Next
    
End Sub

Private Sub cmdQCClearFormRegular_Click()

    cboQCMonthlyJob.Value = ""
        
    txtQCJobNo.Caption = ""
    txtQCClient.Caption = ""
    
    txtBespokeField1Name.Enabled = True
    txtBespokeField1Value.Enabled = True
    txtBespokeField2Name.Enabled = True
    txtBespokeField2Value.Enabled = True
    
    txtBespokeField1Name.SetFocus
    txtBespokeField1Name.Text = ""
    txtBespokeField1Value.SetFocus
    txtBespokeField1Value.Text = ""
    txtBespokeField2Name.SetFocus
    txtBespokeField2Name.Text = ""
    txtBespokeField2Value.SetFocus
    txtBespokeField2Value.Text = ""
        
    txtBespokeField1Name.Enabled = False
    txtBespokeField1Value.Enabled = False
    txtBespokeField2Name.Enabled = False
    txtBespokeField2Value.Enabled = False
        
    lblQCSASTemplate.Caption = "<Not Found>"
        
    Call cmdQCRefreshJobList_Click

End Sub

Private Sub cmdQCGenerateSASRegular_Click()

Set fso = CreateObject("Scripting.FileSystemObject")
If Not fso.FileExists(lblQCSASTemplate.Caption) Then
    MsgBox "SAS Template cannot be found or is not valid. Double-click a job number in the list above to try again.", vbCritical
    
    ' Clear the form and quit
    Call cmdQCClearFormRegular_Click
    Exit Sub
End If

Call GenerateQCChecksSASRegular(txtQCJobNo.Caption, lblQCSASTemplate.Caption)

End Sub

Private Sub cmdRemoveFromDispatch_Click()
    Dim varItems() As Variant
    Dim varItem As Variant
    Dim intIndex As Integer
    Dim blnChanges As Boolean

    intIndex = 0
    
    If lstDispatch.ItemsSelected.Count < 1 Then Exit Sub
    
    ' Get a list of selected indexes and add each record to the dispatch list
    For Each varItem In lstDispatch.ItemsSelected
        ReDim Preserve varItems(0 To intIndex)
        varItems(intIndex) = varItem
        intIndex = intIndex + 1
        lstCompletedJobs.AddItem (lstDispatch.Column(0, varItem) & ";" & lstDispatch.Column(1, varItem))
    Next
    
    ' Sort the list in descending order
    Do
        blnChanges = False
        For intIndex = 1 To UBound(varItems)
            If varItems(intIndex) > varItems(intIndex - 1) Then
                varItem = varItems(intIndex)
                varItems(intIndex) = varItems(intIndex - 1)
                varItems(intIndex - 1) = varItem
                blnChanges = True
            End If
        Next
    Loop Until blnChanges = False
    
    ' Remove each selected item from the completed job list
    For Each varItem In varItems
        lstDispatch.RemoveItem (varItem)
    Next
    
End Sub

Private Sub cmdRefreshJobsToDispatch_Click()
    Dim rstCompletedJobs As ADODB.Recordset
    Dim rstDispatch As ADODB.Recordset
    Dim blnExclude As Boolean
    
    ' Clear down the list of completed jobs
    Do While lstCompletedJobs.ListCount > 0
        lstCompletedJobs.RemoveItem (0)
    Loop
    
    Set rstCompletedJobs = New ADODB.Recordset
    Set rstDispatch = New ADODB.Recordset
    
    ' Get a list of jobs which have completed in the last 7 days
    Call rstCompletedJobs.Open("SELECT J.JobId,J.JobNumber,T.EndDate FROM BatchWorkflow.dbo.Job J INNER JOIN BatchWorkflow.dbo.Process P ON J.JobId = P.JobId CROSS APPLY (SELECT MAX(EndDate) AS EndDate FROM BatchWorkflow.dbo.Task WHERE ProcessId = P.ProcessId) T WHERE DATEDIFF(DAY,T.EndDate,GETDATE()) < 7 AND ((LEFT(J.Workflow,4) <> 'SVoC' AND P.ProcessType = 'Cobra' AND P.EndDate IS NOT NULL) OR (LEFT(J.Workflow,4) = 'SVoC' AND P.ProcessType = 'CreateTriggerFile' AND J.[Status] = 3)) AND LEFT(JobNumber,4) <> 'Test' ORDER BY T.EndDate ASC;", db)
    ' and a list of jobs which have either been dispatched or excluded from the dispatch list in the last 7 days
    Call rstDispatch.Open("SELECT JobId FROM dbo.BWF_Dispatch WHERE DATEDIFF(DAY,Dts,GETDATE()) < 7;", db21)
    
    Do While Not rstCompletedJobs.EOF
        ' For each of the completed jobs
        blnExclude = False
        If Not rstDispatch.EOF Then
            Do While Not rstDispatch.EOF
                ' If the job exists in the dispatched/excluded jobs, exclude it from the list
                If rstDispatch("JobId") = rstCompletedJobs("JobId") Then blnExclude = True
                rstDispatch.MoveNext
            Loop
            rstDispatch.MoveFirst
        End If
        If Not blnExclude Then
            ' If the job is not excluded, add it to the list
            lstCompletedJobs.AddItem (rstCompletedJobs("JobId") & ";" & rstCompletedJobs("JobNumber"))
        End If
        rstCompletedJobs.MoveNext
    Loop
    
    Do While lstDispatch.ListCount > 0
        lstDispatch.RemoveItem (0)
    Loop
    
    rstCompletedJobs.Close
    rstDispatch.Close
    
End Sub


Private Sub cmdRetroCancel_Click()
' CBC 049
    cmdGenerateRetro.SetFocus
    
    cmbRetroDate.Visible = False
    cmdRetroOK.Visible = False
    cmdRetroCancel.Visible = False

End Sub
Private Sub cmdRetroOK_Click()
' CBC 049

    Call GenerateRetro

    cmdGenerateRetro.SetFocus
    
    cmbRetroDate.Visible = False
    cmdRetroOK.Visible = False
    cmdRetroCancel.Visible = False

    

End Sub

Private Sub cmdSelectInput_Click()
    Dim dbCurrent As DAO.Database
    Dim rstJob As DAO.Recordset
    Dim strFilePath As String
    Set dbCurrent = CurrentDb
    Dim objDialog As FileDialog
    
'    Get information from the table which is linked to Sharepoint
    Set rstJob = dbCurrent.OpenRecordset("SELECT [COBRA - Repeat Jobs].* FROM [COBRA - Repeat Jobs] WHERE [Job Number]='" & cboJob.Value & "';")
    
    strFilePath = Trim(Replace(Replace(rstJob("File Location"), Chr(13), ""), Chr(10), ""))
    strFilePath = ProcessPlaceholders(strFilePath)
    If Not Left(strFilePath, Len(ValCobraShareFolder)) = ValCobraShareFolder Then
        strFilePath = ""
    End If
    
    ' CBC 042 Updated default location to the Data Transfers Area
    Set objDialog = Application.FileDialog(msoFileDialogFilePicker)
    objDialog.AllowMultiSelect = False
    objDialog.Title = "Select Input File"
    objDialog.ButtonName = "Select"
    objDialog.Filters.Clear
    objDialog.Filters.Add "All files", "*.*"
    If fso.FolderExists(strFilePath) Then
        objDialog.InitialFileName = strFilePath
    ElseIf fso.FolderExists(DataTransfersInboundFolder) Then
        objDialog.InitialFileName = DataTransfersInboundFolder
    ElseIf fso.FolderExists(DataInFolder) Then
        objDialog.InitialFileName = DataInFolder
    Else
        objDialog.InitialFileName = "C:\"
    End If
    objDialog.Show
    If objDialog.SelectedItems.Count > 0 Then
        txtInputFile.SetFocus
        txtInputFile.Text = objDialog.SelectedItems.item(1)
    End If
    
End Sub

Private Sub cmdSelectReformatConfig_Click()
    Dim objDialog As FileDialog
    Dim strTemplateFolder As String
    
    txtTemplateFolder.SetFocus
    strTemplateFolder = txtTemplateFolder.Text
    If Right(strTemplateFolder, 1) <> "\" Then strTemplateFolder = strTemplateFolder & "\"
    
    Set objDialog = Application.FileDialog(msoFileDialogFilePicker)
    objDialog.AllowMultiSelect = False
    objDialog.Title = "Select Reformat Config"
    objDialog.ButtonName = "Select"
    
    If fso.FolderExists(strTemplateFolder & "ConfigFiles\") Then
        objDialog.InitialFileName = strTemplateFolder & "ConfigFiles\"
    ElseIf fso.FolderExists(strTemplateFolder) Then
        objDialog.InitialFileName = strTemplateFolder
    End If
    objDialog.Show
    If objDialog.SelectedItems.Count > 0 Then
        txtReformatConfig.SetFocus
        txtReformatConfig.Text = Replace(objDialog.SelectedItems.item(1), strTemplateFolder, "")
    End If
End Sub

Private Sub cmdSelectAppendConfig_Click()
    Dim objDialog As FileDialog
    Dim strTemplateFolder As String
    
    txtTemplateFolder.SetFocus
    strTemplateFolder = txtTemplateFolder.Text
    If Right(strTemplateFolder, 1) <> "\" Then strTemplateFolder = strTemplateFolder & "\"
    
    Set objDialog = Application.FileDialog(msoFileDialogFilePicker)
    objDialog.AllowMultiSelect = False
    objDialog.Title = "Select Append Config"
    objDialog.ButtonName = "Select"
    
    If fso.FolderExists(strTemplateFolder & "ConfigFiles\") Then
        objDialog.InitialFileName = strTemplateFolder & "ConfigFiles\"
    ElseIf fso.FolderExists(strTemplateFolder) Then
        objDialog.InitialFileName = strTemplateFolder
    End If
    objDialog.Show
    If objDialog.SelectedItems.Count > 0 Then
        txtAppendConfig.SetFocus
        txtAppendConfig.Text = Replace(objDialog.SelectedItems.item(1), strTemplateFolder, "")
    End If
End Sub

Private Sub cmdSelectScript_Click()
    Dim objDialog As FileDialog
    Dim strTemplateFolder As String
    
    txtTemplateFolder.SetFocus
    strTemplateFolder = txtTemplateFolder.Text
    If Right(strTemplateFolder, 1) <> "\" Then strTemplateFolder = strTemplateFolder & "\"
    
    Set objDialog = Application.FileDialog(msoFileDialogFilePicker)
    objDialog.AllowMultiSelect = False
    objDialog.Title = "Select Script"
    objDialog.ButtonName = "Select"
    
    If fso.FolderExists(strTemplateFolder & "ConfigFiles\") Then
        objDialog.InitialFileName = strTemplateFolder & "ConfigFiles\"
    ElseIf fso.FolderExists(strTemplateFolder) Then
        objDialog.InitialFileName = strTemplateFolder
    End If
    objDialog.Show
    If objDialog.SelectedItems.Count > 0 Then
        txtScriptPath.SetFocus
        txtScriptPath.Text = Replace(objDialog.SelectedItems.item(1), strTemplateFolder, "")
    End If
End Sub

Private Sub cmdSelectTemplate_Click()
    Dim rstTemplateDir As ADODB.Recordset
    Dim objFolder As Folder
    Dim objTempFolder As Folder
    Dim objFile As File
    Dim objTempFile As File
    Dim objDialog As FileDialog
    
' Get the template directory from the configuration table - CBC 070 - Change to use Cobra _Config
    Set rstTemplateDir = New ADODB.Recordset
    rstTemplateDir.Open "SELECT ConfigValue FROM [dbo].[Cobra_Config] WHERE ConfigItem = 'Cobra Template Directory';", db21
    
    Set objDialog = Application.FileDialog(msoFileDialogFolderPicker)
    objDialog.AllowMultiSelect = False
    objDialog.Title = "Select Template Folder"
    objDialog.ButtonName = "Select"
    If fso.FolderExists(rstTemplateDir("ConfigValue")) Then
        objDialog.InitialFileName = rstTemplateDir("ConfigValue")
    End If
    objDialog.Show
    If objDialog.SelectedItems.Count > 0 Then
        txtTemplateFolder.SetFocus
        txtTemplateFolder.Text = objDialog.SelectedItems.item(1)
        Call FindFilesInTemplate(objDialog.SelectedItems.item(1))
        cmdSelectReformatConfig.Enabled = True
        cmdSelectAppendConfig.Enabled = True
        cmdSelectScript.Enabled = True
    Else
        cmdSelectReformatConfig.Enabled = False
        cmdSelectAppendConfig.Enabled = False
        cmdSelectScript.Enabled = False
    End If
    
End Sub



Private Sub cmdSetup_Click()

If MsgBox("Are you sure you want to Setup this Job on VAL?", vbYesNo) = vbYes Then
    Call SetupJobFolder(ValJobsFolder)
End If

End Sub
Private Sub cmdSetupCRL_Click()

If MsgBox("Are you sure you want to Setup this Job on CRL?", vbYesNo) = vbYes Then
    Call SetupJobFolder(CRLJobsFolder)
End If

End Sub

Private Sub cmdTaskList_Click()

Dim JobId As Integer

JobId = Val(lblJobDetailID.Caption)

lblTaskJobId.Caption = lblJobDetailID.Caption

Call PopulateMyList(Replace(sqlJobTasks, "<JobId>", Trim(Str(JobId))), lstTasks, "", "")

pgTasks.Visible = True

pgTasks.SetFocus

End Sub
'CBC 048 TrueVision Report Download
Private Sub cmdTrueVisionReport_Click()
     
    pgeDNAReport.Visible = False
     
    pgeTrueVisionReport.Visible = True
    pgeTrueVisionReport.Enabled = True
    pgeTrueVisionReport.SetFocus
    
    lblTrueVisionReportID.Caption = lblJobDetailID.Caption
    wbTrueVisionReport.Navigate Replace(TrueVisionReportUrl, "{JobId}", lblTrueVisionReportID.Caption)
    
End Sub

Private Sub cmdUpdateJobId_Click()
    Dim rstConfig As ADODB.Recordset
    Dim strJobFolder As String
    Dim strConfigFile As String
    Dim objFolder As Folder
    Dim objFile As File
    Dim objStreamIn, objStreamOut As TextStream
    Dim strLine As String
    Dim intCount As Integer
    Dim RootPath As String
    
    Set rstConfig = New ADODB.Recordset
    Call rstConfig.Open("SELECT Data FROM BatchWorkflow.dbo.Job WHERE JobId = " & CStr(lblJobDetailID.Caption) & ";", db)
    
    strConfigFile = Json_GetContent(rstConfig("Data"), "CobraConfigurationFile")
    
    If UCase(Left(strConfigFile, 12)) = "CONFIGFILES\" Then
        ' If it's a Cobra Monthly template, we also need to determine the job folder and prefix the config path with it
        strJobFolder = Json_GetContent(rstConfig("Data"), "TemplateFolder")
        If Right(strJobFolder, 1) = "\" Then strJobFolder = Left(strJobFolder, Len(strJobFolder) - 1)
        Do While InStr(strJobFolder, "\") > 0
            strJobFolder = Mid(strJobFolder, InStr(strJobFolder, "\") + 1)
        Loop
        strJobFolder = ProcessPlaceholders(strJobFolder)
        
    If UCase(Trim(lbl_JD_Server.Caption)) = "VAL" Then
        RootPath = ValJobsFolder
    Else
        RootPath = CRLJobsFolder
    End If
    
        strJobFolder = RootPath & strJobFolder & "\"
        strConfigFile = strJobFolder & strConfigFile
    End If
    
    ' Trim off the filename to get the configfiles folder
    strJobFolder = ""
    Do While InStr(strConfigFile, "\")
        strJobFolder = strJobFolder & Left(strConfigFile, InStr(strConfigFile, "\"))
        strConfigFile = Mid(strConfigFile, InStr(strConfigFile, "\") + 1)
    Loop
    
    rstConfig.Close

    If Not fso.FolderExists(strJobFolder) Then
        MsgBox ("Error : Could not find ConfigFiles folder")
        Exit Sub
    End If
    
    On Error Resume Next
    Set objFolder = fso.GetFolder(strJobFolder)
    If Err Then
        MsgBox ("Error : Failed to access ConfigFiles folder : " & Err.Description)
        Exit Sub
    End If
    On Error GoTo 0
    
    intCount = 0
    
    For Each objFile In objFolder.Files
        strConfigFile = objFile.Path
        On Error Resume Next
        Set objStreamIn = objFile.OpenAsTextStream(ForReading)
        If Err Then
            MsgBox ("Error : Failed to open batch file " & objFile.Name & " for reading : " & Err.Description)
            Exit Sub
        End If
        Set objStreamOut = fso.CreateTextFile(strConfigFile & "_replace")
        If Err Then
            MsgBox ("Error : Failed to create replacement file : " & Err.Description)
            objStreamIn.Close
            Exit Sub
        End If
        On Error GoTo 0
        
        Do While Not objStreamIn.AtEndOfStream
            strLine = objStreamIn.ReadLine
            objStreamOut.WriteLine (Replace(strLine, "[JOBID]", lblJobDetailID.Caption))
        Loop
        
        objStreamOut.Close
        objStreamIn.Close
        
        On Error Resume Next
        objFile.Delete (True)
        If Err Then
            MsgBox ("Error : Failed to remove original file : " & Err.Description)
            Exit Sub
        End If
        Call fso.MoveFile(strConfigFile & "_replace", strConfigFile)
        If Err Then
            MsgBox ("Error : Failed to move replacement file : " & Err.Description)
            Exit Sub
        End If
        On Error GoTo 0
    Next
    
    MsgBox ("JobIDs Updated")
    
End Sub



Private Sub cmdViewError_Click()

Dim JobId As Integer
Dim rstStatusMessage As Recordset

JobId = Val(lblJobDetailID.Caption)

Set rstStatusMessage = New Recordset

Call rstStatusMessage.Open(Replace(sqlJobStatusMessage, "<JobId>", Trim(Str(JobId))), db)

If Not rstStatusMessage.EOF Then
    Call MsgBox(Replace(Replace(rstStatusMessage("StatusMessage"), "\\", "\"), "\r\n", vbCrLf), vbOKOnly, "Error Message")
    rstStatusMessage.Close
Else
    MsgBox ("No error information found.")
End If

End Sub

Private Sub cmdViewMI_Click()

Dim JobId As Integer

JobId = Val(lblJobDetailID.Caption)

Call PopulateMyList(Replace(sqlJobMI, "<JobId>", Trim(Str(JobId))), lstJobMI, "", "")

pgjobMI.Visible = True

pgjobMI.SetFocus

End Sub

Private Sub cmdViewScriptLog_Click()
    
Dim JobId As Integer
Dim rstConfigPath As Recordset
Dim strFolderPath As String
Dim Pos As Integer
Dim LogFolder As Folder
Dim LogFile As File
Dim tempFile As File
Dim LogStream As TextStream
Dim LastEntries As String

JobId = Val(lblJobDetailID.Caption)

' Get the path of the script file, from which we can derive the log files folder
Set rstConfigPath = New Recordset
Call rstConfigPath.Open("SELECT T.Data [Data:ScriptPath] FROM dbo.Process P INNER JOIN dbo.Task T ON P.ProcessId = T.ProcessId WHERE P.JobId = " & Str(JobId) & " AND T.Handler = 'ScriptHandler';", db)
If rstConfigPath.EOF Then
    MsgBox ("Script path could not be found for this job.")
    Exit Sub
End If
strFolderPath = ParseData(rstConfigPath("Data:ScriptPath"), "ScriptPath")
rstConfigPath.Close

Pos = InStr(strFolderPath, "ConfigFiles\")
If Pos < 1 Then
    MsgBox ("Could not determine job folder from script path.")
    Exit Sub
End If

strFolderPath = Left(strFolderPath, Pos - 1) & "LogFiles\"
    
If Not fso.FolderExists(strFolderPath) Then
    MsgBox ("LogFiles folder could not be found.")
    Exit Sub
End If

Set LogFolder = fso.GetFolder(strFolderPath)

' Attempt to identify the post-processing log file from the files in the folder
For Each tempFile In LogFolder.Files
    If Left(tempFile.Name, 15) = "PostProcessing_" And Right(tempFile.Name, 4) = ".log" Then
        ' If the file fits the naming convention
        If LogFile Is Nothing Then
            ' If we haven't identified any other candidates, use this file
            Set LogFile = tempFile
        Else
            ' If we already have a candidate
            If tempFile.DateLastModified > LogFile.DateLastModified Then
                ' If this one is more recent, use it instead
                Set LogFile = tempFile
            End If
        End If
    End If
Next

Set LogFolder = Nothing

If LogFile Is Nothing Then
    MsgBox ("No post-processing log file could be found.")
    Exit Sub
End If

Set LogStream = LogFile.OpenAsTextStream

Pos = LogFile.Size - 1000
If Pos < 0 Then Pos = 0

LogStream.Skip Pos
If Pos > 0 And Not LogStream.AtEndOfStream Then LogStream.ReadLine

LastEntries = ""
Do While Not LogStream.AtEndOfStream
    LastEntries = LastEntries & LogStream.ReadLine & vbCrLf
Loop

Call MsgBox(LastEntries, vbOKOnly, "Script Log")

LogStream.Close
Set LogFile = Nothing

End Sub

Private Sub cmdWaitingJobs_Click()

lstActiveJobs.ColumnCount = 9
lstActiveJobs.ColumnWidths = "1.51cm;1.2cm;;1.2cm;6cm;1.51cm;2cm;2.5cm;2cm,4cm"

Call PopulateMyList(sqlWaitingJobs, lstActiveJobs, "dbo.BWF_CompleteJobs", "JobId")

End Sub


'Private Sub Command663_Click()
'Call GenerateQCChecksSAS
'End Sub

Private Sub cboQCMonthlyJob_Change()
    Dim dbCurrent As DAO.Database
    Dim rstJob As DAO.Recordset
    Dim strSASTemplatePath As String
    Dim blnOmitSASGeneration As Boolean
    
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    Set dbCurrent = CurrentDb
    
    Set rstJob = dbCurrent.OpenRecordset("SELECT [COBRA - Repeat Jobs].* FROM [COBRA - Repeat Jobs] WHERE [Job Number]='" & cboQCMonthlyJob.Value & "';")
    
    blnOmitSASGeneration = rstJob("Omit SAS Script Generation")
    If blnOmitSASGeneration Then
        MsgBox "A SAS script is not needed for this job, review SharePoint notes for more information.", vbInformation
        Exit Sub
    End If
    
    If Not rstJob.EOF Then
        txtQCClient.Caption = rstJob("Client")
        
        txtBespokeField1Name.Enabled = True
        txtBespokeField1Value.Enabled = True
        txtBespokeField2Name.Enabled = True
        txtBespokeField2Value.Enabled = True
        
        txtBespokeField1Name.SetFocus
        txtBespokeField1Name.Text = strAssign(rstJob("SAS Bespoke Field 1"))
        txtBespokeField1Value.SetFocus
        txtBespokeField1Value.Text = strAssign(rstJob("SAS Bespoke Value 1"))
        txtBespokeField2Name.SetFocus
        txtBespokeField2Name.Text = strAssign(rstJob("SAS Bespoke Field 2"))
        txtBespokeField2Value.SetFocus
        txtBespokeField2Value.Text = strAssign(rstJob("SAS Bespoke Value 2"))
        
        txtBespokeField1Name.Enabled = False
        txtBespokeField1Value.Enabled = False
        txtBespokeField2Name.Enabled = False
        txtBespokeField2Value.Enabled = False

    End If
    
    rstJob.Close
    
    lblQCSASTemplate.Caption = "<Not Found>"
    
    ' Find the job folder; DA doesn't have access to these areas so can't test like this
    Dim strJobFolder As String
    If fso.FolderExists(ValJobsFolder & txtQCJobNo.Caption & "\ConfigFiles\") Then
        strJobFolder = ValJobsFolder & txtQCJobNo.Caption & "\ConfigFiles\"
    ElseIf fso.FolderExists(CRLJobsFolder & txtQCJobNo.Caption & "\ConfigFiles\") Then
        strJobFolder = CRLJobsFolder & txtQCJobNo.Caption & "\ConfigFiles\"
    Else
        MsgBox "Unable to locate job folder on CRL or VAL. Folder name must match Job Number exactly.", vbCritical, txtQCJobNo.Caption
        Exit Sub
    End If
    
    'For testing purposes
    'strJobFolder = "Y:\Production\Neptune\Projects - DO NOT DELETE\COBRA QC\" & txtQCJobNo.Value & "\ConfigFiles\"
    
    Dim strSASTemplateFile As String
    Dim objFile As Object
    Dim objFolder As Object
    Dim objFiles As Object
    
    If Not fso.FolderExists(strJobFolder) Then
        MsgBox "Unable to locate working folder for " & txtQCJobNo.Caption, vbCritical
    End If
    
    Set objFolder = fso.GetFolder(strJobFolder)
    Set objFiles = objFolder.Files
    
    For Each objFile In objFiles
        If objFile.Name Like "*_Template.sas" Then
            lblQCSASTemplate.Caption = strJobFolder & objFile.Name
            Exit For
        End If
    Next objFile
    
End Sub

Private Sub cmdQCRefreshJobList_Click()
    Dim rstCompletedJobs As ADODB.Recordset
    Dim rstQC As ADODB.Recordset
    Dim blnExclude As Boolean
    
    ' Clear down the list of completed jobs
    Do While lstQCCompletedJobs.ListCount > 0
        lstQCCompletedJobs.RemoveItem (0)
    Loop

    Set rstCompletedJobs = New ADODB.Recordset
    Set rstQC = New ADODB.Recordset
    
    ' Get a list of jobs which have completed in the last 7 days
    ' CBC 040 - Extend numbher of days to 14
    Call rstCompletedJobs.Open("SELECT J.JobId,J.JobNumber,T.EndDate FROM BatchWorkflow.dbo.Job J INNER JOIN BatchWorkflow.dbo.Process P ON J.JobId = P.JobId CROSS APPLY (SELECT MAX(EndDate) AS EndDate FROM BatchWorkflow.dbo.Task WHERE ProcessId = P.ProcessId) T WHERE DATEDIFF(DAY,T.EndDate,GETDATE()) < 14 AND ((LEFT(J.Workflow,4) <> 'SVoC' AND P.ProcessType = 'Cobra' AND P.EndDate IS NOT NULL) OR (LEFT(J.Workflow,4) = 'SVoC' AND P.ProcessType = 'CreateTriggerFile' AND J.[Status] = 3)) AND LEFT(JobNumber,4) <> 'Test' ORDER BY J.JobNumber ASC;", db)
    
    ' and a list of jobs which have either been dispatched or excluded from the dispatch list in the last 7 days
    ' CBC 040 - Extend number of days to 14 & order on job number
    Call rstQC.Open("SELECT JobId FROM dbo.BWF_Dispatch WHERE DATEDIFF(DAY,Dts,GETDATE()) < 14;", db21)
    
    Do While Not rstCompletedJobs.EOF
        ' For each of the completed jobs
        blnExclude = False
        If Not rstQC.EOF Then
            Do While Not rstQC.EOF
                ' If the job exists in the dispatched/excluded jobs, exclude it from the list
                If rstQC("JobId") = rstCompletedJobs("JobId") Then blnExclude = True
                rstQC.MoveNext
            Loop
            rstQC.MoveFirst
        End If
        If Not blnExclude Then
            ' If the job is not excluded, add it to the list
            lstQCCompletedJobs.AddItem (rstCompletedJobs("JobId") & ";" & rstCompletedJobs("JobNumber"))
        End If
        rstCompletedJobs.MoveNext
    Loop
    
    rstCompletedJobs.Close
    rstQC.Close
End Sub

Public Sub SetDBConnection()
' CBC 052 - Identify which mode we are running in and check views are all matching

Dim dbLocal As DAO.Database
Dim rst As DAO.Recordset
Dim sql As String
Dim Result As Boolean
Dim td As TableDef
Dim tds As TableDefs
Dim myConnection As String
Dim ActiveServerDB As String
Dim ActiveServerVAL As String
Dim ActiveServerCRL As String
Dim NewConnection As String
Dim FullConnectionDB As String

Set dbLocal = CurrentDb

' get active config entry
sql = "Select * from Config where enabled"
Set rst = dbLocal.OpenRecordset(sql)
rst.MoveLast

' Ensure only one active connection selected
If rst.RecordCount <> 1 Then
    MsgBox ("Invalid SQL Configuration - Please contact Technical Operations")
    DoCmd.Quit
End If

ActiveServerDB = LCase(rst("ConnectionString"))
ActiveServerVAL = LCase(rst("VALConnection"))
ActiveServerCRL = LCase(rst("CRLConnection"))

' setup correct connection string
ConnectionStringDB = Replace(ConnectionTemplateDB, "<ACTIVE_SERVER>", ActiveServerDB)
ConnectionStringCRL = Replace(ConnectionTemplateCRL, "<ACTIVE_SERVER>", ActiveServerCRL)
ConnectionStringVal = Replace(ConnectionTemplateVAL, "<ACTIVE_SERVER>", ActiveServerVAL)

 'check all views are configured for the active server
For Each td In dbLocal.TableDefs
    If Len(Trim(td.SourceTableName)) > 0 And InStr(td.SourceTableName, "dbo.") > 0 Then
        myConnection = LCase(td.Connect)
        Debug.Print myConnection
        If InStr(myConnection, ActiveServerDB) = 0 Then
            MsgBox ("Found Incorrect View Connection on startup, " & vbCrLf & myConnection)
            DoCmd.Quit
        End If
    End If
Next

If LCase(rst("Mode")) <> "live" Then
    MsgBox ("Console is operating in " & rst("Mode") & " mode "), vbCritical
End If

rst.Close

End Sub
Sub Refresh_Sharepoint()

Dim tempLocation As String

'Copy the file to temporary user location, to prevent issues with locking
tempLocation = Environ("TEMP") & "\CobraConsoleSharePointLink.xlsx"
fso.CopyFile RepeatJobsLink, tempLocation, True

DoCmd.SetWarnings False
DoCmd.DeleteObject acTable, "COBRA - Repeat Jobs"
DoCmd.TransferSpreadsheet acImport, , "COBRA - Repeat Jobs", tempLocation, True
DoCmd.SetWarnings True

End Sub
Sub LoadConfiguration()

CRLSchedulerFolder = GetConfigValue("CRLSchedulerFolder")
CRLJobsFolder = GetConfigValue("CRLJobsFolder")
ValJobsFolder = GetConfigValue("ValJobsFolder")
ValCobraShareFolder = GetConfigValue("ValCobraShareFolder")
ScriptFolder = GetConfigValue("ScriptFolder")
DataTransfersInboundFolder = GetConfigValue("DataTransfersInboundFolder")
DataInFolder = GetConfigValue("DataInFolder")
RepeatJobsLink = GetConfigValue("RepeatJobsLink")

End Sub

Function GetConfigValue(ConfigItem As String)

Dim strSQL As String
Dim rst As Recordset

Set rst = New Recordset

' CBC 070 - Change to use Cobra_Config
strSQL = "select ConfigValue from dbo.Cobra_Config where configItem = '" + ConfigItem + "'"
rst.Open strSQL, db21, adOpenForwardOnly, adLockReadOnly

If rst.EOF Then
    GetConfigValue = "Not Found"
    MsgBox "The configuration for " + ConfigItem + " could not be loaded. Please restart the console."
Else
    GetConfigValue = rst("ConfigValue")
End If

rst.Close

End Function

Private Sub Command837_Click()

Dim Filename As String
Dim File As String

Dim Fileloc As String
Dim folderName As String
Dim SubmissionStatus As String
Dim FormName As String
Dim JobNumber As String
Dim ClientName As String
Dim RequestVersion As String
Dim InputFilePath As String
Dim InputFileName As String
Dim FileFullPath As String
Dim InputVolume As String
Dim FileStatus As String
Dim strSQL As String
'Dim rst As Recordset

Dim rst As New ADODB.Recordset
Dim cnn As New ADODB.Connection

'ConnectionStringDB = Replace(ConnectionTemplateDB, "<ACTIVE_SERVER>", ActiveServerDB)
'ConnectionTemplateDB

Dim xlbSource As Workbook
Dim xlsSource As Worksheet

If Me.ParameterFormListTable.ListIndex < 0 Then

MsgBox ("Please select a file from the list")

Else

Filename = Me.ParameterFormListTable.Value
File = "\\valdotcssvm011\backoffice_shares$\DataOperations\DODB\Cobra\ParameterForms\" & Filename
Workbooks.Open (File)

Fileloc = Right(File, Len(File) - InStrRev(File, "\"))
folderName = Replace(File, Filename, "")

Set xlbSource = Workbooks.Open(File, , True)
Set xlsSource = xlbSource.Worksheets("BSB & TrueVision Parameter Form")

lblPFMatchedFolder.Caption = folderName
lblPFMatchedFileName.Caption = Fileloc

SubmissionStatus = xlsSource.[Submission_Status]
ClientName = xlsSource.[ClientName]
FormName = xlsSource.[Job_Description]
JobNumber = xlsSource.[JobNumber]
RequestVersion = xlsSource.[RequestVersion]
InputFilePath = xlsSource.[InputFilePath]
InputFileName = xlsSource.[InputFileName]
InputVolume = xlsSource.[InputVolume]

lblPFStatus.Caption = SubmissionStatus
lblPFClientName.Caption = ClientName
lblPFName.Caption = FormName
lblPFJobNumber.Caption = JobNumber
lblPFRequestType.Caption = RequestVersion
lblPFInputFolder.Caption = InputFilePath
lblPFInputFile.Caption = InputFileName
lblPFInputRecords.Caption = InputVolume

If Not Right(lblPFInputFolder.Caption, 1) = "\" Then
InputFilePath = lblPFInputFolder.Caption & "\"

'FileFullPath = InputFilePath & InputFileName
FileFullPath = "\\VALWINLVAPP030\CobraShare$\CreditSolutions\TransUnion\CDA0008586"
'MsgBox InputFilePath
'MsgBox InputFileName

Set fso = CreateObject("Scripting.FileSystemObject")


End If
If fso.FileExists(FileFullPath) Then
    lblPFInputFileStatus.Caption = "File Found"
Else
    lblPFInputFileStatus.Caption = "File Not Found"
End If

End If


'If file found enable setup button

    strSQL = "select * from dbo.COBRA_File where Filename = '" & Me.ParameterFormListTable.Value & "'"
    'Set rst = New Recordset
    cnn.ConnectionString = "Provider=SQLNCLI11;Persist Security Info=False;Extended Properties=""DSN=Main;Description=Main Database;APP=Visual Basic;Trusted_Connection=Yes"";server=pllwinlvsql002\mb21,1433;database=DataBureauDataLoadAudit;driver={SQL Server}"
    cnn.Open
    
    rst.Open strSQL, cnn, adOpenForwardOnly, adLockReadOnly
    If rst.EOF Then
    lblPFMatchedRecords.Caption = "File Not Found"
        'lblPFMatched.Caption = "File Match Found"
        'lblPFMatchedFileName.Caption = rst("FileName")
        'lblPFMatchedFolder.Caption = rst("Folder")
        'lblFileID.Caption = FileID
        Else
        If rst("RowCount") = "0" Or InputVolume = "0" Then
            lblPFMatchedRecords.Caption = "Row Count unavailable"
        Else
            lblPFMatchedRecords.Caption = rst("RowCount")
        End If
    End If
    rst.Close
    

setupJobVALBtn.Enabled = True
setupJobCRLBtn.Enabled = True
RejectFormBtn.Enabled = True


End Sub

Private Sub CountRecordsBtn_Click()

'CBC 058 Adhoc file receipt checks
'Call Powershell script which gets record count

Dim CountRecordsScript As String
Dim Script_WithArgs
Dim oShell
Dim retVal
Dim appCmd
Dim PS_Script As String
Dim Filename As String
Dim FileFolder As String
Dim FilePath As String
Dim doubleQuotes As String
Dim lngFileID As String
Dim waitOnReturn As Boolean: waitOnReturn = True

doubleQuotes = """"
PS_Script = ScriptFolder & CountRecordsScript

If Not IsNull(FileListTable.Value) Then
    lngFileID = Str(FileListTable.Value)
    'Get the file path
    Filename = Nz(DLookup("Filename", "dbo_vw_CobraFilesToDisplay", "SourceFileID = " & Str(lngFileID)))
    FileFolder = Nz(DLookup("Folder", "dbo_vw_CobraFilesToDisplay", "SourceFileID = " & Str(lngFileID)))
    FilePath = FileFolder & Filename

    If fso.FileExists(FilePath) Then
        'Set a message for user
        Form_Status.Status = "Counting records for the file..."
        Form_Status.Visible = True
        'Call the script
        Set oShell = CreateObject("Wscript.Shell")
        Script_WithArgs = doubleQuotes & PS_Script & doubleQuotes & " -FileID " & lngFileID & " -FilePath " & doubleQuotes & FilePath & doubleQuotes
        appCmd = "powershell.exe -ExecutionPolicy Unrestricted -file " & Script_WithArgs
        retVal = oShell.Run(appCmd, 0, waitOnReturn)

        Form_Status.Visible = False
        MsgBox retVal
        'Check the status returned by powershell
        If retVal = 0 Then
            MsgBox "Record count for file is now updated"
        ElseIf retVal = 1 Then
            MsgBox "Record count could not be calculated or the file is empty"
        ElseIf retVal = 2 Then
            MsgBox "Record count calculated, but could not be inserted into Database"
        End If
    Else
        MsgBox "The file doesn't exist in the given location anymore"
    End If
    FileListTable.Requery
End If

End Sub

Private Sub FileListTable_Click()
'CBC 058 Adhoc file receipt checks

    RejectFileBtn.Enabled = True
    SummaryReportBtn.Enabled = True
    CountRecordsBtn.Enabled = True
End Sub

Private Sub Form_Load()

Dim strSQL As String
Dim rst As Recordset
Dim strConfig As String
Dim ts As Object
Dim strLineIn As String

'CBC 052 Migrating from Megabase21
Call SetDBConnection

' Me.Manual_Error_Search.Visible = False
pgJobDetail.Visible = False
pgjobMI.Visible = False
pgTasks.Visible = False
lstBatchedConfigs.Visible = False
cmbRetroDate.Visible = False
cmdRetroOK.Visible = False
cmdRetroCancel.Visible = False

Set rst = New Recordset

' VAL BWFE Database
Set db = New Connection
db.ConnectionString = ConnectionStringVal
db.Open
db.CommandTimeout = 360

' CRL BWFE Database
Set dbCRL = New Connection
dbCRL.ConnectionString = ConnectionStringCRL
dbCRL.Open
dbCRL.CommandTimeout = 360

' MB21 Database
Set db21 = New Connection
db21.ConnectionString = ConnectionStringDB
db21.Open
db21.CommandTimeout = 360

'CBC 052 Migrating from megabase21
Call LoadConfiguration

Set fso = CreateObject("scripting.FileSystemObject")

'CBC 060 Sharepoint Repeat jobs link
Call Refresh_Sharepoint

crlf = Chr(13) & Chr(10)

strUsername = GetWindowsUserName
PathZipProgram = "C:\program files\winzip\WZZIP.EXE"

strConfig = Replace(CurrentDb.Name, ".mdb", ".config")

If fso.FileExists(strConfig) Then
    Set ts = fso.OpenTextFile(strConfig, ForReading)
    While Not ts.AtEndOfStream
        strLineIn = ts.ReadLine

        If LCase(Left(strLineIn, Len("WinZip="))) = LCase("WinZip=") Then
           PathZipProgram = Mid(strLineIn, Len("WinZip=") + 1)
        End If
    Wend
    ts.Close
End If

sqlActiveJobs = GetSQL(ScriptFolder & "JobListStarted.sql")
sqlErroredJobs = GetSQL(ScriptFolder & "JobListError.sql")
sqlPausedJobs = GetSQL(ScriptFolder & "JobListPaused.sql")
sqlWaitingJobs = GetSQL(ScriptFolder & "JobListWaiting.sql")
sqlCompletedJobs = GetSQL(ScriptFolder & "JobListCompleted.sql")
sqlCurrentTasks = GetSQL(ScriptFolder & "CurrentTasks.sql")
sqlProcessDetail = GetSQL(ScriptFolder & "ProcessDetail.sql")
sqlJobMI = GetSQL(ScriptFolder & "JobMI.sql")
sqlHandlers = GetSQL(ScriptFolder & "ListHandlers.sql")
sqlHandlerQueue = GetSQL(ScriptFolder & "HandlerQueue.sql")
sqlJobTasks = GetSQL(ScriptFolder & "JobTasks.sql")
sqlJobStatusMessage = GetSQL(ScriptFolder & "JobStatusMessage.sql")
sqlJobNumberSearch = GetSQL(ScriptFolder & "JobNumberSearch.sql")

' Before starting check that the software is the latest version. CBC 070 - Change to use the existing function GetConfigValue
If SoftwareVersion <> GetConfigValue("CobraConsole Version") Then
    ' Proceed with all pages disabled, so nothing can be done.
    MsgBox ("This is not the correct software version, please copy the latest live version")
    db.Close
Else
    lstActiveJobs.ColumnWidths = "1.2cm;1.2cm;4cm;6cm;1.5cm;1.5cm;1.3cm;2cm;1.3cm;1.503cm;1.4cm;1.4cm;1.503cm;4cm"
    lstActiveJobs.ColumnCount = 14
    Call PopulateMyList(sqlActiveJobs, lstActiveJobs, "dbo.BWF_CompleteJobs", "JobId")
    Call PopulateMyList(sqlCurrentTasks, lstCurrentTasks, "dbo.BWF_CompleteJobs", "JobId")
            
    Call ClearDispatchForm
    pgActiveJobs.SetFocus
End If

End Sub
Function GetWindowsUserName() As String
    
    Dim lngLen As Long
    Dim strBuffer As String
    
    Const dhcMaxUserName = 255
    
    strBuffer = Space(dhcMaxUserName)
    lngLen = dhcMaxUserName
    If CBool(GetUserName(strBuffer, lngLen)) Then
        GetWindowsUserName = Left$(strBuffer, lngLen - 1)
    Else
        GetWindowsUserName = ""
    End If
End Function
Function strFileFromFolder(strFullFile As String) As String

Dim strOut As String
Dim intP As Integer

strOut = Trim(strFullFile)

' read through until no more slashes
Do
    intP = InStr(strOut, "\")
    If intP = Len(strOut) Then
        ' last character so no filename
        strOut = ""
        intP = 0
    ElseIf intP > 0 Then
        strOut = Mid(strOut, intP + 1)
    End If
Loop While intP > 0

strFileFromFolder = strOut

End Function
Public Sub ShellAndWait(ByVal PathName As String, Optional WindowState)
    
    Dim hProg As Variant
    Dim hProcess As Long, ExitCode As Long
    Dim fso As FileSystemObject
    
    Set fso = CreateObject("scripting.FileSystemObject")
    
    hProg = Shell(PathName, WindowState)
    
    'hProg is a "process ID under Win32. To get the process handle:
    hProcess = OpenProcess(PROCESS_QUERY_INFORMATION, False, hProg)
    Do
        'populate Exitcode variable
        GetExitCodeProcess hProcess, ExitCode
        DoEvents
    Loop While ExitCode = STILL_ACTIVE

End Sub
Sub Sleep(intSeconds As Integer)

Dim intNow As Double
Dim intThen As Double
Dim intMidnight As Double

' timer gives number of seconds since midnight
intNow = Timer
intThen = intNow + intSeconds
intMidnight = 60 * 60
intMidnight = intMidnight * 24

' if our sleep crosses midnight?
If intThen > intMidnight Then
    ' wait until midnight first
    While Timer <> 0
    Wend
    intThen = intThen = intMidnight
End If

' now wait until we get there
While Timer < intThen
Wend

End Sub
Function strAssign(varIn As Variant) As String

If IsNull(varIn) Then
    strAssign = ""
Else
    strAssign = varIn
End If

End Function
Function Pad(inData As Variant, inLen As Integer) As String
' pad a string out to the required length,left justified

Dim strData As String

If IsNull(inData) Then
    inData = ""
End If

strData = inData

strData = Left(Trim(strData) & Space(inLen), inLen)

Pad = strData

End Function
Function cPad(inData As Variant, inLen As Integer) As String
' pad a string out to the required length, centre justified

Dim strData As String
Dim LeftSpaces As Integer

If IsNull(inData) Then
    inData = ""
End If

strData = Trim(inData)

LeftSpaces = inLen - Len(strData)

If LeftSpaces < 2 Then
    ' not enough room to centre, so left justify
    strData = Left(strData & Space(inLen), inLen)
Else
    If LeftSpaces Mod 2 <> 0 Then
        ' uneven number of spaces, so have less on the left hadn side
        LeftSpaces = (inLen - Len(strData) - 1) / 2
    Else
        LeftSpaces = (inLen - Len(strData)) / 2
    End If
    
    strData = Left(Space(LeftSpaces) & strData & Space(inLen), inLen)
End If

cPad = strData

End Function
Function Trim(varIn As Variant) As String

    If IsNull(varIn) Then
        Trim = ""
    Else
        Trim = LTrim(RTrim(varIn))
    End If

End Function

Private Sub lstActiveJobs_DblClick(Cancel As Integer)

Dim JobId As Long

If Not IsNull(lstActiveJobs.Value) Then

    JobId = lstActiveJobs.Value
    
    lblJobDetailID.Caption = JobId
    
    Call PopulateJobDetails(JobId)
    
    pgJobDetail.SetFocus
    
End If

End Sub
Private Sub lstCurrentTasks_DblClick(Cancel As Integer)

Dim JobId As Long

If Not IsNull(lstCurrentTasks.Value) Then

    JobId = lstCurrentTasks.Value
    
    lblJobDetailID.Caption = JobId
    
    Call PopulateJobDetails(JobId)
    
    pgJobDetail.SetFocus
    
End If

End Sub


Private Sub lstQCCompletedJobs_DblClick(Cancel As Integer)
    Dim varItems() As Variant
    Dim varItem As Variant
    Dim intIndex As Integer
    Dim blnChanges As Boolean
    Dim strQCJobNo As String

    intIndex = 0
    
    If lstQCCompletedJobs.ItemsSelected.Count < 1 Then Exit Sub ' Do nothing
    If lstQCCompletedJobs.ItemsSelected.Count > 1 Then ' Only one at a time
        MsgBox "Must select only one item. Please try again.", vbExclamation
        Exit Sub
    End If
    
    ' Put the job number in both boxes for now
    For Each varItem In lstQCCompletedJobs.ItemsSelected
        ReDim Preserve varItems(0 To intIndex)
        varItems(intIndex) = varItem
        intIndex = intIndex + 1

        strQCJobNo = lstQCCompletedJobs.Column(1, varItem)
    Next
    
    Call cmdQCClearFormRegular_Click
    
    txtQCJobNo.Caption = strQCJobNo
    
    ' Find the job ref in the regular jobs list
    Dim intIndex2 As Integer
    With cboQCMonthlyJob
        .Enabled = True
        .Value = ""
        For intIndex2 = 0 To .ListCount - 1
            If txtQCJobNo.Caption Like .Column(0, intIndex2) & "_*" Then
                .Value = .ItemData(intIndex2)
                Exit For
            End If
        Next
        
        ' If we found a regular job, populate the fields and forget about ad hoc
        If Not .Value = "" Then
            Call cboQCMonthlyJob_Change
        Else
            MsgBox "Could not find a regular job in SharePoint for Job Number " & txtQCJobNo.Caption, vbCritical, txtQCJobNo.Caption
        End If
        
        .Enabled = False
    End With

End Sub



Private Sub ParameterFormInfoBtn_Click()
'CBC 058 Adhoc file receipt checks
    Dim ParameterFormName As String

    'Get the name of the Parameter form
    If Not IsNull(ParameterFormTable.Value) Then
        ParameterFormName = Trim(ParameterFormTable.Column(2))
        Call GetParameterFormInfo(ParameterFormTable.Value, ParameterFormName)
    Else
        Exit Sub
    End If
End Sub

Private Sub ParameterFormListTable_Initialize()

Dim Filename As String

ParameterFormListTable.RowSource = ""

Filename = Dir("\\valdotcssvm011\backoffice_shares$\DataOperations\DODB\Cobra\ParameterForms" & "\*.xls*", vbNormal)

Do While Len(Filename) > 0

Me.ParameterFormListTable.AddItem Filename

Filename = Dir()
Loop

'Dim myfso As FileSystemObject
'Dim myfolder As Object
'Dim myfile As Object
'
'Me.ParameterFormListTable.RowSource = ""
'
'Set myfso = New Scripting.FileSystemObject
'Set myfolder = FSO.GetFolder("\\valdotcssvm011\backoffice_shares$\DataOperations\DODB\Cobra\ParameterForms")
'
'For Each myfile In myfolder.Files
'
'Me.ParameterFormListTable.AddItem myfile.Name
'
'Next myfile
End Sub

Private Sub PFAddFileToExistFolBtn_Click()
'CBC 058 Adhoc file receipt checks

Dim lngFileID As Long
Dim strSQL As String
Dim Filename As String
Dim FileFolder As String
Dim FiletoCopy As String
Dim JobNumber As String
Dim Configfiles As String
Dim DestinationConfigFolderVAL As String
Dim DestinationConfigFolderCRL As String


Filename = Me.ParameterFormListTable.Value
FiletoCopy = "\\valdotcssvm011\backoffice_shares$\DataOperations\DODB\Cobra\ParameterForms\" & Filename

'Need to investigate about DAO 3.6
'Call LoadConfiguration
Dim ValJobsFolder As String
Dim CRLJobsFolder As String

ValJobsFolder = "\\valwinlvapp030\bsbappend$\Jobs\"
CRLJobsFolder = "\\crlwinlvapp037\bsbappend$\Jobs\"

JobNumber = Trim(lblPFJobNumber.Caption)
Configfiles = JobNumber & "\ConfigFiles\"
DestinationConfigFolderVAL = ValJobsFolder & Configfiles
DestinationConfigFolderCRL = CRLJobsFolder & Configfiles
'JobFolderCRL = CRLJobsFolder & JobNumber
'Filename = lblPFInputFile.Caption
'FileFolder = lblPFInputFolder.Caption

Dim PFPath As String
PFPath = lblPFMatchedFolder.Caption & lblPFMatchedFileName.Caption

If Not IsNull(ParameterFormListTable.Value) Then

Dim fso As Object
Set fso = CreateObject("Scripting.FileSystemObject")

' Asking on which enviroment users wants to add a Parameter Form

    If MsgBox("Existing Job is on VAL?", vbYesNo) = vbYes Then
    MsgBox ("Open Val enviroment")
        If CopyPFtoSelectedEnviroment(FiletoCopy, DestinationConfigFolderVAL, ValJobsFolder) = True Then
        MsgBox ("PF was copied")
        Else
        MsgBox ("PF failed to be copied")
        Exit Sub
        End If
        'Asking if it's the right location, if yes then calling function ( need to create from code in ht bottom)
        'if no then open folder list to select
    Else
        If MsgBox("Existing Job is on CRL?", vbYesNo) = vbYes Then
        MsgBox ("Open CRL enviroment")
        If CopyPFtoSelectedEnviroment(FiletoCopy, DestinationConfigFolderCRL, CRLJobsFolder) = False Then
        MsgBox ("PF was copied")
        Else
        MsgBox ("PF failed to be copied")
        Exit Sub
        End If
        
        'Asking if it's the right location, if yes then calling function ( need to create from code in ht bottom)
        'if no then open folder list to select
    Else
    Exit Sub
    End If
End If

''Open CRL folder list to choose
End If

End Sub

Private Function CopyPFtoSelectedEnviroment(FiletoCopy As String, Destination As String, Environment As String) As Boolean

Dim FileCopied As Boolean
Dim ManuallySelectedFolder As String

Dim fso As Object
Set fso = CreateObject("Scripting.FileSystemObject")

On Error GoTo FileCopied_Error

If MsgBox("Are you sure you want to copy the PF automatically from:" & vbCrLf & FiletoCopy & "To:" & vbCrLf & Destination & " ?", vbYesNo) = vbYes Then
    'copy the file from receipt location
    If fso.FileExists(FiletoCopy) Then
    fso.CopyFile Source:=FiletoCopy, Destination:=Destination
'            fso.CopyFile FileToCopy, CopyToFolder
    MsgBox ("File was copied")
    FileCopied = True
    End If
Else
    MsgBox ("Choose destination manually")
    ManuallySelectedFolder = SelectFolder(Environment)
    If ManuallySelectedFolder <> "" Then
        fso.CopyFile Source:=FiletoCopy, Destination:=ManuallySelectedFolder
        MsgBox ("File was copied")
        FileCopied = True
    Else
        FileCopied = False
    End If
    '        MsgBox ("File was rejected, it could not be found as " & vbCrLf & FiletoCopy & vbCrLf & "Please add the file manually")
'        FileCopied = False
End If

FileCopied_Error:
MsgBox ("Failed, Terminal Error")
FileCopied = False

End Function
Private Function SelectFolder(Environment As String) As String

Dim sFolder As String
    ' Open the select folder prompt
    With Application.FileDialog(msoFileDialogFolderPicker)
        .Title = "Select a Folder"
        .AllowMultiSelect = False
        .ButtonName = "Select"
        .InitialFileName = Environment
        If .Show = -1 Then ' if OK is pressed
            sFolder = .SelectedItems(1)
        End If
    End With
    
    SelectFolder = sFolder

End Function

Private Sub pgCurrentTasks_Click()

    Call PopulateMyList(sqlCurrentTasks, lstCurrentTasks, "dbo.BWF_CompleteJobs", "JobId")

End Sub

Private Function GetSQL(Filename As String) As String

Dim sql As String
Dim tf As Object
Dim LastLine As String

sql = ""

If Not fso.FileExists(Filename) Then
    MsgBox ("SQL Script " & Filename & " not found")
Else
    Set tf = fso.OpenTextFile(Filename, ForReading)
    While Not tf.AtEndOfStream
            sql = sql & tf.ReadLine & vbCrLf
    Wend
    tf.Close
End If
    
GetSQL = sql

End Function

Private Function ReadLastLine(LogFile As String) As String
' get the last line of the log file specified

    Dim Tf_In As Object
    Dim BlockSize As Integer
    Dim LastLine As String
    Dim F As Object

    BlockSize = 1000

    Set Tf_In = fso.GetFile(LogFile)
        
    If Tf_In.Size < BlockSize Then
        BlockSize = Tf_In.Size - 1
    End If
    
    ' use the fileaccess class for reading header and footer
    Set F = New Random
    
    F.OpenFile (LogFile)
    
    ' read last 10000 bytes to find footer
    Call F.SeekAbsoluteKT(Tf_In.Size - BlockSize - 1)
    LastLine = F.ReadBytes(BlockSize)
    
    F.CloseFile
    Set F = Nothing
    
    ReadLastLine = GetLastLine(LastLine)

End Function

Function GetLastLine(strTosearch As String) As String

Dim pointer As Integer
Dim TempString As String
Dim Delimiter As String

Delimiter = Chr(13) & Chr(10)

TempString = strTosearch

Do
    pointer = InStr(TempString, Delimiter)
    
    If pointer > 0 And pointer + Len(Delimiter) < Len(TempString) Then
        TempString = Mid(TempString, pointer + Len(Delimiter))
    End If
Loop While pointer > 0

GetLastLine = TempString

End Function

Sub PopulateJobDetails(JobId As Long)

Dim rst As Recordset
Dim RunID As Long
Dim ListType As String
Dim sql As String
Dim counter As Integer
Dim DataList As Variant

pgJobDetail.Visible = True
' clear list
lstJobDetails.Value = Null
While lstJobDetails.ListCount > 0
    lstJobDetails.RemoveItem (0)
Wend

' Add Headings
lstJobDetails.AddItem ("Parameter;Value")

' Get the 'system' values
sql = "select left(Value,3) [System] from BatchWorkflow.dbo.JobProperty where JobId = " & Trim(Str(JobId)) & " and Name = 'FilterValue'"
Set rst = New Recordset
rst.Open sql, db, adOpenForwardOnly, adLockReadOnly

If Not rst.EOF Then
    lstJobDetails.AddItem ("System;" & strAssign(rst("System")))
    lbl_JD_Server.Caption = strAssign(rst("System"))
End If
rst.Close

sql = "select * from BatchWorkflow.dbo.Job where JobId = " & Trim(Str(JobId))

Set rst = New Recordset
rst.Open sql, db, adOpenForwardOnly, adLockReadOnly
                
' parse the data field which contains numerous components
DataList = ParseFullLine(strAssign(rst("Data")))
              
If Not rst.EOF Then
    lstJobDetails.AddItem ("JobId;" & Trim(Str(rst("JobId"))))
    lstJobDetails.AddItem ("JobNumber;" & Trim(rst("JobNumber")))
    lstJobDetails.AddItem ("JobType;" & Trim(rst("JobType")))
    lstJobDetails.AddItem ("Workflow;" & Trim(rst("Workflow")))
    lstJobDetails.AddItem ("Priority;" & Trim(rst("Priority")))
    lstJobDetails.AddItem ("StartDate;" & Trim(rst("StartDate")))
    lstJobDetails.AddItem ("EndDate;" & Trim(rst("EndDate")))
    lstJobDetails.AddItem ("InputVolume;" & Trim(rst("InputVolume")))
    lstJobDetails.AddItem ("Status;" & Trim(rst("Status")))
    lstJobDetails.AddItem ("StatusMessage;" & Trim(rst("StatusMessage")))
    
    For counter = LBound(DataList) To UBound(DataList)
        If Len(DataList(counter)) > 0 Then
            lstJobDetails.AddItem (DataList(counter))
        End If
    Next counter
End If

If Left(rst("Workflow"), 4) = "SVoC" Then
    cmdDNAReport.Visible = True
    cmdTrueVisionReport.Visible = False
Else
    cmdDNAReport.Visible = False
End If

rst.Close

'CBC 048 TrueVision Report Download
'Check if the job is TrueVision one, make the TrueVision report button available
sql = "select * from BatchWorkflow.dbo.JobProperty where JobId = " & Trim(Str(JobId)) & " and Name = 'Product name'"
Set rst = New Recordset
rst.Open sql, db, adOpenForwardOnly, adLockReadOnly
If Not rst.EOF Then
    If rst("Value") = "TrueVision" Then
        cmdTrueVisionReport.Visible = True
        cmdDNAReport.Visible = False
    Else
        cmdTrueVisionReport.Visible = False
    End If
End If
rst.Close

Call PopulateMyList(Replace(sqlProcessDetail, "<JobId>", Trim(Str(JobId))), lstProcessDetails, "", "")

End Sub

Sub PopulateMyList(sql As String, MyList As ListBox, SuppressionTable As String, SuppField As String)

Dim rst As Recordset
Dim rstSup As Recordset

Dim counter As Integer
Dim DataString As String
Dim ParseHeader As String
Dim ParseField As Integer
Dim SuppSql As String
Dim DisplayLine As Boolean

'On Error GoTo Quitsub

ParseField = 0

' clear list
MyList.Value = Null
While MyList.ListCount > 0
    MyList.RemoveItem (0)
Wend

' open query
Set rst = New Recordset
rst.Open sql, db, adOpenForwardOnly, adLockReadOnly
                
If Not rst.EOF Then
    
    ' Add list header
    DataString = rst(0).Name
    For counter = 1 To rst.Fields.Count - 1
        If InStr(rst(counter).Name, ":") > 0 Then
            ParseField = counter
            ParseHeader = Mid(rst(counter).Name, InStr(rst(counter).Name, ":") + 1)
            DataString = DataString & ";" & ParseHeader
        Else
            DataString = DataString & ";" & rst(counter).Name
        End If
    Next counter
    MyList.AddItem DataString
    
    ' Add data
    While Not rst.EOF
        
        ' check suppresions
        If Len(Trim(SuppressionTable)) Then
            
            SuppSql = "select " & SuppField & " from " & SuppressionTable & " where " & SuppField & " = " & strAssign(rst(0))
            Set rstSup = New Recordset
            rstSup.Open SuppSql, db21, adOpenForwardOnly, adLockReadOnly
            
            If rstSup.EOF Then
                DisplayLine = True
            Else
                DisplayLine = False
            End If
            rstSup.Close
        Else
            DisplayLine = True
        End If
    
        If DisplayLine Then
    
            DataString = strAssign(rst(0))
            For counter = 1 To rst.Fields.Count - 1
                If ParseField = counter Then
                    DataString = DataString & ";" & ParseFilename(ParseData(rst(counter), ParseHeader))
                Else
                    DataString = DataString & ";" & strAssign(rst(counter))
                End If
            Next counter
            MyList.AddItem DataString
        End If
        
        rst.MoveNext
    Wend

End If
rst.Close
Exit Sub
Quitsub:
    MsgBox ("Error in Code")
    
End Sub
Function ParseFullLine(ByVal strIn As String) As Variant

Dim ArrayOut As Variant
Dim DataArray() As String
Dim Fieldcount As Integer
Dim Pos As Integer
Dim PosEnd As Integer
Dim ColumnName As String

Fieldcount = 0

While Len(strIn)
    strIn = Replace(Replace(Replace(strIn, "\\", "\"), "}", ""), "{", "")
    
    ' check to see if we have at least one field left
    Pos = InStr(strIn, ":")
        
    ' OK then next header is left of the :
    Fieldcount = Fieldcount + 1
    
    ReDim Preserve DataArray(0 To Fieldcount)
    
    ColumnName = Replace(Left(strIn, Pos - 1), Chr(34), "")
    
    strIn = Mid(strIn, Pos + 1)
    
    ' now find the end of this data value
    Pos = InStr(strIn, Chr(34) & ",")
    If Pos = 0 Then
        DataArray(Fieldcount) = ColumnName & ";" & Replace(strIn, Chr(34), "")
        strIn = ""
    Else
        DataArray(Fieldcount) = ColumnName & ";" & Replace(Left(strIn, Pos - 1), Chr(34), "")
        strIn = Mid(strIn, Pos + 2)
    End If
Wend

ParseFullLine = DataArray

End Function

Function ParseData(MainString As String, ParseField As String)

Dim Pos As Integer
Dim WorkString As String
Dim WorkField As String

WorkString = MainString
WorkField = LCase(Chr(34) & ParseField & Chr(34) & ":")
      
Pos = InStr(LCase(WorkString), WorkField)

If Pos = 0 Then
    WorkString = ""
Else
    WorkString = Mid(WorkString, Pos + Len(WorkField) + 1)
    WorkString = Left(WorkString, InStr(WorkString, Chr(34)) - 1)
    WorkString = Replace(WorkString, "\\", "\")
End If

ParseData = WorkString
      
End Function

Function ParseFilename(OriginalString As String)

Dim Pos As Integer
Dim WorkString As String

WorkString = OriginalString

Do
    Pos = InStr(WorkString, "\")
    If Pos Then
        WorkString = Mid(WorkString, Pos + 1)
    End If
Loop While Pos > 0

Pos = InStr(LCase(WorkString), ".config")
If Pos > 0 Then
    WorkString = Left(WorkString, Pos - 1)
End If

ParseFilename = WorkString

End Function
Function CleanForList(LineIn As Variant) As String

Dim LineOut As String

If IsNull(LineIn) Then
    LineOut = ""
Else
    LineOut = Trim(LineIn)
    
    ' remove characters which are interpreted as delimiters by the list box
    LineOut = Replace(LineOut, ";", " ")
    LineOut = Replace(LineOut, ",", " ")
End If
    
CleanForList = LineOut

End Function

'Private Sub PickFile_Click()
'
''CBC 058 pick file from the list
'
'Dim mail As MailItem
'Dim attachment
'Dim attachmentPath As String
'Dim attachmentPathFilename As String
'Dim ParameterFormName As String
'
'
'Dim ClientName As String
'Dim JobNumber As String
'Dim FileLocation As String
'Dim FileName As String
'Dim FileSize As String
'Dim RequestType As String
'Dim SubmissionStatus As String
'Dim InputFileFound As String
'Dim FilePath As String
'
'Dim FileNameCurrent As String
'Dim FileLocationCurrent As String
'Dim FileSizeCurrent As String
'Dim FileID As String
'Dim strSQL As String
'Dim rst As Recordset
'
'Form_Status.Status = "Getting parameter form details..."
'Form_Status.Visible = True
'
'
'Dim SelectedFile    As String
'Dim FilePicker      As FileDialog
'Dim SQLdelete       As String
'
'Set FilePicker = Application.FileDialog(msoFileDialogFilePicker)
'FilePicker.AllowMultiSelect = False
'FilePicker.Filters.Add "Excel", "*.xls*", 1
'FilePicker.InitialFileName = "\\valdotcssvm011\backoffice_shares$\DataOperations\DODB\Cobra\ParameterForms"
'FilePicker.Title = "Please Select the Excel Data..."
'FilePicker.Show
'
'If FilePicker.SelectedItems.Count <> 0 Then
'    SelectedFile = FilePicker.SelectedItems(1)
'
'   ' DoCmd.TransferSpreadsheet acImport, acSpreadsheetTypeExcel9, "tbl_Name", SelectedFile, True
'
'    MsgBox ("The data has been successfully loaded")
'
'Call ReadParameterForm(SelectedFile, ClientName, JobNumber, FileLocation, FileName, FileSize, RequestType, SubmissionStatus)
'
'ParameterFormName = SelectedFile
'
'lblPFName.Caption = ParameterFormName
''lblPFSubjectName.Caption = mail.Subject
''lblPFStatus.Caption = SubmissionStatus
'lblPFJobNumber.Caption = JobNumber
'lblPFClientName.Caption = ClientName
'lblPFRequestType.Caption = RequestType
'lblPFInputFolder.Caption = FileLocation
'lblPFInputFile.Caption = FileName
'lblPFInputRecords.Caption = FileSize
'lblFileID.Caption = ""
'
'
'
'End If
'
'End Sub
'



Private Sub setupJobBtnVAL()

'CBC 058 Adhoc file receipt checks
Dim BSBTemplateFolder As String
Dim JobNumber As String
Dim JobFolderCRL As String
Dim JobFolder As String
Dim SourceFiles As String
Dim Configfiles As String
Dim PFPath As String
Dim ZipSuccess As Boolean
Dim txtStream As TextStream
Dim SummaryReportPath As String
Dim MonthlyTemplateFolder As String
Dim setupCLR As Boolean
Dim Msg As String
Dim SrcFilePath As String
Dim SrcFileName As String


JobNumber = Trim(lblPFJobNumber.Caption)
JobFolder = ValJobsFolder & JobNumber
'JobFolderCRL = CRLJobsFolder & JobNumber
SourceFiles = JobFolder & "\SourceFiles\"
Configfiles = JobFolder & "\ConfigFiles\"
PFPath = lblPFMatchedFolder.Caption & lblPFMatchedFileName.Caption
SummaryReportPath = Configfiles & JobNumber & "_SummaryReport.html"
SrcFileName = lblPFInputFile.Caption

'MsgBox JobFolderCRL
'MsgBox JobFolder
'MsgBox ("SourceFiles") & SourceFiles
'MsgBox Configfiles
'MsgBox ("parameter form path") & PFPath
'MsgBox JobNumber
'MsgBox SummaryReportPath
'MsgBox Right(lblPFInputFolder.Caption, 1)



'Check if template folder is accessible

MonthlyTemplateFolder = GetConfigValue("Cobra Template Directory")
MsgBox MonthlyTemplateFolder
BSBTemplateFolder = MonthlyTemplateFolder & "zTemplate"
'MsgBox BSBTemplateFolder
If Not fso.FolderExists(BSBTemplateFolder) Then
    MsgBox "Failed to retrieve Job template folder"
    Exit Sub
End If

If fso.FolderExists(JobFolder) Then
    MsgBox "Job folder already exists. Remove or archive the folder before setting up a new one: " & JobFolder
    Exit Sub
End If

'Copy folder to adhoc server and rename according to job number

Form_Status.Status = "Creating job folder..."
Form_Status.Visible = True
fso.CopyFolder BSBTemplateFolder, JobFolder
If Not fso.FolderExists(JobFolder) Then
    MsgBox "Failed to copy Job template folder while setting up"
    Form_Status.Visible = False
    Exit Sub
End If

'Copy parameter form to JobFolder/ConfigFiles
Form_Status.Status = "Copying input file to job folder..."
Form_Status.Visible = True
If fso.FileExists(PFPath) Then 'copy parameter form
    fso.CopyFile PFPath, Configfiles
Else
    MsgBox "Failed to copy the input file to the job folder"
    Form_Status.Visible = False
    Exit Sub
    
End If


'Copy source file to
If Not Right(lblPFInputFolder.Caption, 1) = "\" Then
SrcFilePath = lblPFInputFolder.Caption & "\"
End If

Form_Status.Status = "Copying source file to job folder..."
Form_Status.Visible = True
If fso.FileExists(SrcFilePath & SrcFileName) Then
    fso.CopyFile (SrcFilePath & SrcFileName), SourceFiles
Else
    MsgBox "Failed to copy the source file to the job folder"
    Form_Status.Visible = False
    Exit Sub
End If


''Save submission email to config files
'Form_Status.Status = "Setting up job folder..."
'Form_Status.Visible = True
'Set mail = GetEmailObject(lblemailID.Caption)
'If IsNull(mail) Then
'    MsgBox "Failed to retrieve submission email from mailbox"
'    Form_Status.Visible = False
'    Exit Sub
'End If
'mail.SaveAs (Configfiles & JobNumber & "_" & lblPFClientName.Caption & "_Submission.msg")

'Copy parameter form to config files
                                                      '!!!!!!!!!!!!!!!!Call DownloadAttachment(mail, lblPFName.Caption, Configfiles)

'ReGenerate the summary report and save in ConfigFiles
Form_Status.Status = "Generating summary report..."
Form_Status.Visible = True
Set txtStream = fso.CreateTextFile(SummaryReportPath, True)
txtStream.Write (GenerateReport)
txtStream.Close
Form_Status.Visible = False

MsgBox "Job Setup Successful"

End Sub


Private Sub setupJobBtnCRL()


'CBC 058 Adhoc file receipt checks
Dim BSBTemplateFolder As String
Dim JobNumber As String
Dim JobFolderCRL As String
Dim JobFolder As String
Dim SourceFiles As String
Dim Configfiles As String
Dim PFPath As String
Dim ZipSuccess As Boolean
Dim txtStream As TextStream
Dim SummaryReportPath As String
Dim MonthlyTemplateFolder As String
Dim setupCLR As Boolean
Dim Msg As String
Dim SrcFilePath As String
Dim SrcFileName As String


JobNumber = Trim(lblPFJobNumber.Caption)
'JobFolder = ValJobsFolder & JobNumber
JobFolderCRL = CRLJobsFolder & JobNumber
SourceFiles = JobFolderCRL & "\SourceFiles\"
Configfiles = JobFolderCRL & "\ConfigFiles\"
PFPath = lblPFMatchedFolder.Caption & lblPFMatchedFileName.Caption
SummaryReportPath = Configfiles & JobNumber & "_SummaryReport.html"
SrcFileName = lblPFInputFile.Caption

'MsgBox JobFolderCRL
'MsgBox JobFolder
'MsgBox ("SourceFiles") & SourceFiles
'MsgBox Configfiles
MsgBox ("parameter form path") & PFPath
'MsgBox JobNumber
'MsgBox SummaryReportPath
MsgBox Right(lblPFInputFolder.Caption, 1)



'Check if template folder is accessible

MonthlyTemplateFolder = GetConfigValue("Cobra Template Directory")
MsgBox MonthlyTemplateFolder
BSBTemplateFolder = MonthlyTemplateFolder & "zTemplate"
MsgBox BSBTemplateFolder
If Not fso.FolderExists(BSBTemplateFolder) Then
    MsgBox "Failed to retrieve Job template folder"
    Exit Sub
End If

If fso.FolderExists(JobFolderCRL) Then
    MsgBox "Job folder already exists. Remove or archive the folder before setting up a new one: " & JobFolderCRL
    Exit Sub
End If

'Copy folder to adhoc server and rename according to job number

Form_Status.Status = "Creating job folder..."
Form_Status.Visible = True
fso.CopyFolder BSBTemplateFolder, JobFolderCRL
If Not fso.FolderExists(JobFolderCRL) Then
    MsgBox "Failed to copy Job template folder while setting up"
    Form_Status.Visible = False
    Exit Sub
End If

'Copy parameter form to JobFolder/ConfigFiles
Form_Status.Status = "Copying input file to job folder..."
Form_Status.Visible = True
If fso.FileExists(PFPath) Then 'copy parameter form
    fso.CopyFile PFPath, Configfiles
Else
    MsgBox "Failed to copy the input file to the job folder"
    Form_Status.Visible = False
    Exit Sub
    
End If


'Copy source file to
If Not Right(lblPFInputFolder.Caption, 1) = "\" Then
SrcFilePath = lblPFInputFolder.Caption & "\"
End If

Form_Status.Status = "Copying source file to job folder..."
Form_Status.Visible = True
If fso.FileExists(SrcFilePath & SrcFileName) Then
    fso.CopyFile (SrcFilePath & SrcFileName), SourceFiles
Else
    MsgBox "Failed to copy the source file to the job folder"
    Form_Status.Visible = False
    Exit Sub
End If


''Save submission email to config files
'Form_Status.Status = "Setting up job folder..."
'Form_Status.Visible = True
'Set mail = GetEmailObject(lblemailID.Caption)
'If IsNull(mail) Then
'    MsgBox "Failed to retrieve submission email from mailbox"
'    Form_Status.Visible = False
'    Exit Sub
'End If
'mail.SaveAs (Configfiles & JobNumber & "_" & lblPFClientName.Caption & "_Submission.msg")

'Copy parameter form to config files
                                                      '!!!!!!!!!!!!!!!!Call DownloadAttachment(mail, lblPFName.Caption, Configfiles)

'ReGenerate the summary report and save in ConfigFiles
Form_Status.Status = "Generating summary report..."
Form_Status.Visible = True
Set txtStream = fso.CreateTextFile(SummaryReportPath, True)
txtStream.Write (GenerateReport)
txtStream.Close
Form_Status.Visible = False

MsgBox "Job Setup Successful"

End Sub


Function GenerateReport() As String

Dim MessageStrBody As String
Dim strTableStdCSS As String
Dim strTHStdCSS As String
Dim strTDStdCSS As String

Dim Filename As String
Dim FileFolder As String
Dim FilePath As String
Dim FileNameOriginal As String
Dim FileFolderOriginal As String
Dim FileDTS As String
Dim RowCount As String
Dim rst As Recordset
Dim strSQL As String
Dim F
Dim Delimiter As String
Dim txtStream As TextStream
Dim firstLine As String
Dim header
Dim i


Filename = lblPFMatchedFileName.Caption
FileFolder = lblPFMatchedFolder.Caption
FilePath = FileFolder & Filename
    
If Len(lblPFName.Caption) > 0 Then
'    'Get info about the first entry on the file chain OriginalFilename, OriginalLocation and Received DTS
'    strSQL = "Exec up_COBRA_ShowFileHistory @myFileID = '" & Trim(lblFileID.Caption) & "', @SourcePath = '" & Trim(FilePath) & "'"
'    'get top 1 as the returned list is sorted
'    Set rst = New Recordset
'    rst.Open strSQL, db21, adOpenForwardOnly, adLockReadOnly
'    If Not rst.EOF Then
'        FileNameOriginal = Trim(rst("Filename"))
'        FileFolderOriginal = Trim(rst("Folder"))
'        FileDTS = Trim(rst("DTS"))
'        rst.Close
'    Else
'        MsgBox "Original file details could not be retrieved. Failed to generate the report"
'        rst.Close
'        Exit Function
'    End If
'Else
    'File was from data in, not stored in sql, current and original names will be the same
    FileNameOriginal = lblPFMatchedFileName.Caption
    FileFolderOriginal = lblPFMatchedFolder.Caption
    Set F = fso.GetFile(FileFolder & Filename)
    FileDTS = F.DateLastModified
End If

'If no row count, then calculate it
If lblPFMatchedRecords.Caption = "Row Count unavailable" Then
    Dim tempFile
    'Open the file and with flag 8 - for appending go straight to the end
    Set tempFile = fso.OpenTextFile(FilePath, 8, True)
    RowCount = CStr(tempFile.Line - 1)
    tempFile.Close
Else
    RowCount = lblPFMatchedRecords.Caption
End If

'Generate report as HTML string and return
strTableStdCSS = "border-collapse:collapse;font-size:11pt;font-family:arial,helvetica,sans-serif;"
strTHStdCSS = "text-align:left;margin:0px;padding:5px;background-color:#00A6CA;color:#ffffff;text-align:left;width:150px;border-style:solid;border-width:1px;border-color:#ffffff;"
strTDStdCSS = "margin:0px;padding:5px;border-style:solid;border-width:1px;border-color:#888888;"
'Generic report email starts here, includes Original name, Location Received, DTS, Current Name, Current Location, Row Count
MessageStrBody = "<html><body style = ""font-family:calibri,arial,helvetica,sans-serif;font-size:11pt;"">"
MessageStrBody = MessageStrBody & "<p><br>"
MessageStrBody = MessageStrBody & "<table style = """ & strTableStdCSS & """>"
MessageStrBody = MessageStrBody & "   <tr>"
MessageStrBody = MessageStrBody & "       <th style = """ & strTHStdCSS & """>" & "Original Name</th>"
MessageStrBody = MessageStrBody & "       <td style = """ & strTDStdCSS & """>" & FileNameOriginal & "</td>"
MessageStrBody = MessageStrBody & "   </tr>"
MessageStrBody = MessageStrBody & "   <tr>"
MessageStrBody = MessageStrBody & "       <th style = """ & strTHStdCSS & """>" & "Location Received</th>"
MessageStrBody = MessageStrBody & "       <td style = """ & strTDStdCSS & """>" & FileFolderOriginal & "</td>"
MessageStrBody = MessageStrBody & "   </tr>"
MessageStrBody = MessageStrBody & "   <tr>"
MessageStrBody = MessageStrBody & "       <th style = """ & strTHStdCSS & """>" & "Received Time</th>"
MessageStrBody = MessageStrBody & "       <td style = """ & strTDStdCSS & """>" & FileDTS & "</td>"
MessageStrBody = MessageStrBody & "   </tr>"
MessageStrBody = MessageStrBody & "   <tr>"
MessageStrBody = MessageStrBody & "       <th style = """ & strTHStdCSS & """>" & "Current Name</th>"
MessageStrBody = MessageStrBody & "       <td style = """ & strTDStdCSS & """>" & Filename & "</td>"
MessageStrBody = MessageStrBody & "   </tr>"
MessageStrBody = MessageStrBody & "   <tr>"
MessageStrBody = MessageStrBody & "       <th style = """ & strTHStdCSS & """>" & "Current Location</th>"
MessageStrBody = MessageStrBody & "       <td style = """ & strTDStdCSS & """>" & FileFolder & "</td>"
MessageStrBody = MessageStrBody & "   </tr>"
MessageStrBody = MessageStrBody & "   <tr>"
MessageStrBody = MessageStrBody & "       <th style = """ & strTHStdCSS & """>" & "Record Count</th>"
MessageStrBody = MessageStrBody & "       <td style = """ & strTDStdCSS & """>" & RowCount & "</td>"
MessageStrBody = MessageStrBody & "   </tr>"
MessageStrBody = MessageStrBody & "</table>"
MessageStrBody = MessageStrBody & "</p>"
   
''Delimiter = GetDelimiter(FilePath)
''If Len(Delimiter) > 0 Then
'    'Get a list of fields from header
'    Set txtStream = fso.OpenTextFile(FilePath, ForReading, False)
'    firstLine = txtStream.ReadLine
'    txtStream.Close
'    header = Split(firstLine, Delimiter)
'    'Specific report part including delimiter, field list
'    MessageStrBody = MessageStrBody & "<p style=margin-top:15px>File Delimiter has been identified as '" & Delimiter & "'.</p>"
'    MessageStrBody = MessageStrBody & "<p>See identified field list below: "
'    MessageStrBody = MessageStrBody & "<table style = """ & strTableStdCSS & """>"
'    For i = LBound(header) To UBound(header)
'        MessageStrBody = MessageStrBody & "   <tr>"
'        MessageStrBody = MessageStrBody & "       <th style = """ & strTHStdCSS & """>" & "Field " & i + 1 & "</th>"
'        MessageStrBody = MessageStrBody & "       <td style = """ & strTDStdCSS & """>" & header(i) & "</td>"
'        MessageStrBody = MessageStrBody & "   </tr>"
'    Next i
'    MessageStrBody = MessageStrBody & "</table>"
'    MessageStrBody = MessageStrBody & "</p>"
'Else
'    'Specific email part stating that the file structure is not clear
'    MessageStrBody = MessageStrBody & "<p>File Delimiter could not be identified, unable to generate field list.</p>"
'End If

MessageStrBody = MessageStrBody & "</body></html>"

'Return html string with styles
GenerateReport = MessageStrBody

End Function

Private Sub Select_ParameterForm()

Dim FilePicker      As FileDialog
Dim pickedfile As Boolean
Dim SelectedFile As String

Dim Filename As String
Dim folderName As String
Dim SubmissionStatus As String
Dim FormName As String
Dim JobNumber As String
Dim ClientName As String
Dim RequestVersion As String
Dim InputFilePath As String
Dim InputFileName As String
Dim InputVolume As String


Dim xlbSource As Workbook
Dim xlsSource As Worksheet



Set FilePicker = Application.FileDialog(msoFileDialogFilePicker)

FilePicker.AllowMultiSelect = False
FilePicker.Filters.Add "Excel", "*.xls*", 1
FilePicker.InitialFileName = "\\valdotcssvm011\backoffice_shares$\DataOperations\DODB\Cobra\ParameterForms"
FilePicker.Title = "Please Select the Excel Data..."
FilePicker.Show

If FilePicker.SelectedItems.Count <> 0 Then

SelectedFile = FilePicker.SelectedItems(1)
    
Filename = Right(SelectedFile, Len(SelectedFile) - InStrRev(SelectedFile, "\"))
folderName = Replace(SelectedFile, Filename, "")

End If

Set xlbSource = Workbooks.Open(SelectedFile, , True)
Set xlsSource = xlbSource.Worksheets("BSB & TrueVision Parameter Form")

lblPFMatchedFolder.Caption = folderName
lblPFMatchedFileName.Caption = Filename

End Sub

Private Sub pgParameterFormDetails_Open()

setupJobVALBtn.Enabled = False
setupJobCRLBtn.Enabled = False
RejectFormBtn.Enabled = False

Call btn_RefreshParameterFormListTable_Click

End Sub


Private Sub RefreshFilesBtn_Click()
'CBC 058 Adhoc file receipt checks
    FileListTable.Requery
End Sub

'Private Sub RefreshPFsBtn_Click()
''CBC 058 Adhoc file receipt checks
'    Call PopulateParameterFormList
'End Sub

Private Sub RejectFileBtn_Click()

'CBC 058 Adhoc file receipt checks

Dim lngFileID As Long
Dim strSQL As String
Dim Filename As String
Dim FileFolder As String
Dim objOutlook As Object
Dim objEmail As Object

If Not IsNull(FileListTable.Value) Then
    lngFileID = FileListTable.Value
    Filename = Nz(DLookup("Filename", "dbo_vw_CobraFilesToDisplay", "SourceFileID = " & Str(lngFileID)))
    FileFolder = Nz(DLookup("Folder", "dbo_vw_CobraFilesToDisplay", "SourceFileID = " & Str(lngFileID)))
    If MsgBox("Are you sure you wish to reject and delete file" & vbCrLf & FileFolder & Filename & " ?", vbYesNo) = vbYes Then

        'add file to the rejects table
        strSQL = "Insert into dbo.Cobra_RejectedFiles (FileID, RejectedBy, RejectedDate) "
        strSQL = strSQL & "select SourceFileID,'" & strUsername & "',getdate() from "
        strSQL = strSQL & "dbo.vw_CobraFilesToDisplay where SourceFileID = " & Trim(Str(lngFileID))

        db21.Execute (strSQL)
        FileListTable.Requery

        'Delete the file from receipt location
        If fso.FileExists(FileFolder & Filename) Then
            fso.DeleteFile FileFolder & Filename, Force:=True
            MsgBox ("File was rejected and deleted")
        Else
            MsgBox ("File was rejected, however it could not be found as " & vbCrLf & FileFolder & Filename & vbCrLf & "Please delete the file manually")
        End If
    End If

End If
End Sub

Private Sub RejectFormBtn_Click()


Dim Filename As String
Dim FileFolder As String
Dim File As String
Dim Msg As String

If Not IsNull(ParameterFormListTable.Value) Then

Filename = Me.ParameterFormListTable.Value
FileFolder = "\\valdotcssvm011\backoffice_shares$\DataOperations\DODB\Cobra\ParameterForms\"
Msg = MsgBox("Are you sure you wish to reject and delete file" & vbCrLf & FileFolder & Filename & " ?", vbYesNo)

If Msg = vbYes Then

File = FileFolder & Filename

   'MsgBox ("Add file to the rejects table.SQL")
'           'add file to the rejects table
'        strSQL = "Insert into dbo.Cobra_RejectedFiles (FileID, RejectedBy, RejectedDate) "
'        strSQL = strSQL & "select SourceFileID,'" & strUsername & "',getdate() from "
'        strSQL = strSQL & "dbo.vw_CobraFilesToDisplay where SourceFileID = " & Trim(Str(lngFileID))
'
'        db21.Execute (strSQL)
   
    'Delete the file from receipt location
        If fso.FileExists(File) Then
            fso.DeleteFile File, Force:=True
            MsgBox ("File was rejected and deleted")
        Else
            MsgBox ("File was rejected, however it could not be found as " & vbCrLf & FileFolder & Filename & vbCrLf & "Please delete the file manually")
        End If
            
End If
End If
Call ParameterFormListTable_Initialize
Call btn_ClearParameterFormDetails_Click
RejectFormBtn.Enabled = False

End Sub

Public Sub setupJobCRLBtn_Click()

Dim MsgSetup As String

MsgSetup = MsgBox("Are you sure you want to Setup this Job on CRL?", vbYesNo)

If MsgSetup = vbNo Then
    setupJobCRLBtn.Enabled = True
    Exit Sub

Else

If lblPFInputFileStatus.Caption = "File Found" Then
Call setupJobBtnCRL

Else

If MsgBox("Input file was not found, are you wish to setup job?", vbYesNo) = vbYes Then


    Call setupJobBtnCRL '(CRLJobsFolder)
    Else
    setupJobCRLBtn.Enabled = True
    Exit Sub
End If
End If
End If
setupJobCRLBtn.Enabled = False

End Sub

Private Sub setupJobVALBtn_Click()

Dim MsgSetup As String

MsgSetup = MsgBox("Are you sure you want to Setup this Job on VAL?", vbYesNo)

If MsgSetup = vbNo Then
    setupJobVALBtn.Enabled = True
    Exit Sub

Else

If lblPFStatus.Caption <> "Submission OK" Then
    If MsgBox("The job status is not OK, do you want to setup job?", vbYesNo) = vbNo Then
    Exit Sub
    End If
End If



If lblPFInputFileStatus.Caption = "File Found" Then
Call setupJobBtnVAL

Else

If MsgBox("Input file was not found, do you wish to setup job?", vbYesNo) = vbYes Then


    Call setupJobBtnVAL '(ValJobsFolder)
    Else
    setupJobVALBtn.Enabled = True
    Exit Sub
End If
End If
End If
setupJobVALBtn.Enabled = False

End Sub

Private Sub SummaryReportBtn_Click()

'CBC 058 Adhoc file receipt checks
Dim lngFileID As String
Dim Filename As String
Dim FileFolder As String
Dim FilePath As String
Dim FileNameOriginal As String
Dim FileFolderOriginal As String
Dim FileDTS As String
Dim RowCount As String
Dim rst As Recordset
Dim strSQL As String

Dim firstLine As String
Dim header
Dim txtStream As TextStream
Dim CountCommas As Integer
Dim CountTabs As Integer
Dim CountPipes As Integer
Dim CountSemicolons As Integer
Dim CountTildes As Integer
Dim CountArray(4, 1) As Variant
Dim Delimiter As String
Dim DelimiterCount As Integer
Dim DelimiterIdentified As Boolean

Dim objOutlook As Object
Dim objEmail As Object
Dim Email_To As String
Dim Email_CC As String
Dim Email_BCC As String
Dim MessageStrBody As String
Dim strTableStdCSS As String
Dim strTHStdCSS As String
Dim strTDStdCSS As String
Dim i As Integer


'Get file path
If Not IsNull(FileListTable.Value) Then
    Set objOutlook = CreateObject("Outlook.Application")
    Set objEmail = objOutlook.CreateItem(0)

    lngFileID = FileListTable.Value
    Filename = Nz(DLookup("Filename", "dbo_vw_CobraFilesToDisplay", "SourceFileID = " & Str(lngFileID)))
    FileFolder = Nz(DLookup("Folder", "dbo_vw_CobraFilesToDisplay", "SourceFileID = " & Str(lngFileID)))
    FilePath = FileFolder & Filename
    RowCount = (Nz(DLookup("RowCount", "dbo_vw_CobraFilesToDisplay", "SourceFileID = " & Str(lngFileID))))
    'Check if file exists
    If Not fso.FileExists(FilePath) Then
        MsgBox "The file doesn't exist in the given location anymore"
        Exit Sub
    End If
    'Use stream reader to read only the first line
    Set txtStream = fso.OpenTextFile(FilePath, ForReading, False)
    firstLine = txtStream.ReadLine
    txtStream.Close
    'Check how many of each delimiter in the line
    CountCommas = (Len(firstLine) - Len(Replace(firstLine, ",", ""))) / Len(",")
    CountTabs = (Len(firstLine) - Len(Replace(firstLine, Chr(9), ""))) / Len(Chr(9))
    CountPipes = (Len(firstLine) - Len(Replace(firstLine, "|", ""))) / Len("|")
    CountSemicolons = (Len(firstLine) - Len(Replace(firstLine, ";", ""))) / Len(";")
    CountTildes = (Len(firstLine) - Len(Replace(firstLine, "~", ""))) / Len("~")
    'Put delimiter name and count into two dimensional array
    CountArray(0, 0) = ","
    CountArray(1, 0) = Chr(9)
    CountArray(2, 0) = "|"
    CountArray(3, 0) = ";"
    CountArray(4, 0) = "~"
    CountArray(0, 1) = CountCommas
    CountArray(1, 1) = CountTabs
    CountArray(2, 1) = CountPipes
    CountArray(3, 1) = CountSemicolons
    CountArray(4, 1) = CountTildes

    'Check which delimiter occurs the most
     QuickSortArray CountArray, , , 1
     Delimiter = CountArray(4, 0)
     DelimiterCount = CountArray(4, 1)

    'Check if delimiter is identified
    If (DelimiterCount = 0 Or (CountArray(3, 1) = CountArray(4, 1))) Then
        'If delimiter is unidentified then display first record to operator and request delimiter input
        Delimiter = InputBox("The delimiter could not be identified, please confirm it. File Header:" & vbCrLf & firstLine & vbCrLf & "Click cancel or leave empty if unable to identify", "Could not identify delimiter")
        If StrPtr(Delimiter) = 0 Then
            DelimiterIdentified = False
        ElseIf Delimiter = "" Then
            DelimiterIdentified = False
        Else
            DelimiterIdentified = True
        End If
    Else
        DelimiterIdentified = True
        'Get a list of fields from header
        header = Split(firstLine, Delimiter)
    End If

    'Get info about the first entry on the file chain OriginalFilename, OriginalLocation and Received DTS
    strSQL = "Exec up_COBRA_ShowFileHistory @myFileID = '" & Trim(lngFileID) & "', @SourcePath = '" & Trim(FilePath) & "'"
    'get top 1 as the returned list is sorted
    Set rst = New Recordset
    rst.Open strSQL, db21, adOpenForwardOnly, adLockReadOnly
    If Not rst.EOF Then
        FileNameOriginal = Trim(rst("Filename"))
        FileFolderOriginal = Trim(rst("Folder"))
        FileDTS = Trim(rst("DTS"))
        rst.Close
    Else
        MsgBox "Original file details could not be retrieved"
        rst.Close
        Exit Sub
    End If

    'Styles for table
    strTableStdCSS = "border-collapse:collapse;font-size:11pt;font-family:arial,helvetica,sans-serif;"
    strTHStdCSS = "text-align:left;margin:0px;padding:5px;background-color:#00A6CA;color:#ffffff;text-align:left;width:150px;border-style:solid;border-width:1px;border-color:#ffffff;"
    strTDStdCSS = "margin:0px;padding:5px;border-style:solid;border-width:1px;border-color:#888888;"
    'Generic report email starts here, includes Original name, Location Received, DTS, Current Name, Current Location, Row Count
    MessageStrBody = "<html><body style = ""font-family:calibri,arial,helvetica,sans-serif;font-size:11pt;"">"
    MessageStrBody = MessageStrBody & "<p>Hi,</p>"
    MessageStrBody = MessageStrBody & "<p>Please see Summary Report for the file below: "
    MessageStrBody = MessageStrBody & "<table style = """ & strTableStdCSS & """>"
    MessageStrBody = MessageStrBody & "   <tr>"
    MessageStrBody = MessageStrBody & "       <th style = """ & strTHStdCSS & """>" & "Original Name</th>"
    MessageStrBody = MessageStrBody & "       <td style = """ & strTDStdCSS & """>" & FileNameOriginal & "</td>"
    MessageStrBody = MessageStrBody & "   </tr>"
    MessageStrBody = MessageStrBody & "   <tr>"
    MessageStrBody = MessageStrBody & "       <th style = """ & strTHStdCSS & """>" & "Location Received</th>"
    MessageStrBody = MessageStrBody & "       <td style = """ & strTDStdCSS & """>" & FileFolderOriginal & "</td>"
    MessageStrBody = MessageStrBody & "   </tr>"
    MessageStrBody = MessageStrBody & "   <tr>"
    MessageStrBody = MessageStrBody & "       <th style = """ & strTHStdCSS & """>" & "Received Time</th>"
    MessageStrBody = MessageStrBody & "       <td style = """ & strTDStdCSS & """>" & FileDTS & "</td>"
    MessageStrBody = MessageStrBody & "   </tr>"
    MessageStrBody = MessageStrBody & "   <tr>"
    MessageStrBody = MessageStrBody & "       <th style = """ & strTHStdCSS & """>" & "Current Name</th>"
    MessageStrBody = MessageStrBody & "       <td style = """ & strTDStdCSS & """>" & Filename & "</td>"
    MessageStrBody = MessageStrBody & "   </tr>"
    MessageStrBody = MessageStrBody & "   <tr>"
    MessageStrBody = MessageStrBody & "       <th style = """ & strTHStdCSS & """>" & "Current Location</th>"
    MessageStrBody = MessageStrBody & "       <td style = """ & strTDStdCSS & """>" & FileFolder & "</td>"
    MessageStrBody = MessageStrBody & "   </tr>"
    MessageStrBody = MessageStrBody & "   <tr>"
    MessageStrBody = MessageStrBody & "       <th style = """ & strTHStdCSS & """>" & "Record Count</th>"
    MessageStrBody = MessageStrBody & "       <td style = """ & strTDStdCSS & """>" & RowCount & "</td>"
    MessageStrBody = MessageStrBody & "   </tr>"
    MessageStrBody = MessageStrBody & "</table>"
    MessageStrBody = MessageStrBody & "</p>"


    If DelimiterIdentified Then
        'Specific email part including delimiter, field list
        MessageStrBody = MessageStrBody & "<p style=margin-top:15px>File Delimiter has been identified as '" & Delimiter & "'.</p>"
        MessageStrBody = MessageStrBody & "<p>See identified field list below: "
        MessageStrBody = MessageStrBody & "<table style = """ & strTableStdCSS & """>"
        For i = LBound(header) To UBound(header)
            MessageStrBody = MessageStrBody & "   <tr>"
            MessageStrBody = MessageStrBody & "       <th style = """ & strTHStdCSS & """>" & "Field " & i + 1 & "</th>"
            MessageStrBody = MessageStrBody & "       <td style = """ & strTDStdCSS & """>" & header(i) & "</td>"
            MessageStrBody = MessageStrBody & "   </tr>"
        Next i
        MessageStrBody = MessageStrBody & "</table>"
        MessageStrBody = MessageStrBody & "</p>"
    Else
        'Specific email part stating that the file structure is not clear
        MessageStrBody = MessageStrBody & "<p>File Delimiter could not be identified, unable to generate field list.</p>"
    End If

    'Generic report email ending
    MessageStrBody = MessageStrBody & "<p><br/>Regards,<br/>Databureau</p>"
    MessageStrBody = MessageStrBody & "</body></html>"
    objEmail.HTMLBody = MessageStrBody
    objEmail.Subject = "Adhoc File Summary Report for " & FileNameOriginal

    'Get summary email recipient list
    strSQL = "select * from dbo.Cobra_SummaryRecipients"
    rst.Open strSQL, db21, adOpenForwardOnly, adLockReadOnly
    If Not rst.EOF Then
        While Not rst.EOF
            Select Case UCase(Trim(rst("EmailType")))
            Case "TO"
                Email_To = Email_To & Trim(rst("EmailAddress")) & ";"
            Case "CC"
                Email_CC = Email_CC & Trim(rst("EmailAddress")) & ";"
            Case "BCC"
                Email_BCC = Email_BCC & Trim(rst("EmailAddress")) & ";"
            End Select
            rst.MoveNext
        Wend
        ' always add DB for audit purposes
        Email_BCC = Email_BCC & "DataBureau@transunion.co.uk"
        ' must have something in TO otherwise email will fail
        If Len(Trim(Email_To)) = 0 Then
            MsgBox ("No 'Email To' type Recipients found in dbo.Cobra_SummaryRecipients, report email could not be sent")
            rst.Close
            Exit Sub
        End If
    End If
    rst.Close
    objEmail.To = Email_To
    objEmail.CC = Email_CC

    Dim objOutlookAccount As Object
    For Each objOutlookAccount In objOutlook.Session.Accounts
        If objOutlookAccount = "DataBureau@transunion.co.uk" Then
            Set objEmail.SendUsingAccount = objOutlookAccount
        End If
    Next
    objEmail.SentOnBehalfOfName = "DataBureau@transunion.co.uk"
    objEmail.bodyformat = 2  'HTML
    objEmail.Display

    'Ask user if report was generated successfully, allowing to then mark the file as having report generated in SQL
    If MsgBox("Was the report successfully generated and sent?", vbYesNo) = vbYes Then
        strSQL = "Insert into Cobra_SummaryReport (FileID, GeneratedBy, GeneratedDate) Values ('" & lngFileID & "', '" & strUsername & "', GETDATE())"
        db21.Execute (strSQL)
    'Else Finish subroutine
    End If
    FileListTable.Requery
End If
End Sub

Private Sub txtAdhocJobDispatch_AfterUpdate()

    Dim ClientManager As String
    Dim BusinessConsultant As String
    Dim ProjectManager As String
    Dim Client As String
    Dim StaticEmails As String
    Dim sFound As String
    Dim ConfigfilesPath As String
    Dim wb As Workbook
    Dim WS As Worksheet
    Dim RawDataRequested As Boolean
    Dim OwnGroupAll As Boolean
    Dim Submitter As String
    
    
    'CBC 056 Option to automate Share, OWN Group and Job Submitter fields from Parameter form
    'CBC 056 - KT - Rewrote this entire subroutine to simplify and improve
    
    'Get path to parameter form, it will be the only .xlsm file in jobfolder/configfiles, so use this
    ConfigfilesPath = ValJobsFolder & Trim(txtAdhocJobDispatch.Value) & "\ConfigFiles\"
    'Check if the derived path exists
    If fso.FolderExists(ConfigfilesPath) Then
        sFound = Dir(ConfigfilesPath & "*.xlsm")    'the first one found
        If sFound <> "" Then
            Set wb = Workbooks.Open(ConfigfilesPath & sFound, , True)
            'Open the excel and check if it's actually parameter form before reading other values, then set the worksheet
            'If Not wsExists("BSB & TrueVision Parameter Form", wb) Then     Somewhy ws Exits is in error
                MsgBox "Could not find the Parameter Form in Job Folder ConfigFiles subfolder"
                Exit Sub
            End If
            Set WS = wb.Worksheets("BSB & TrueVision Parameter Form")
            'Fetch "Requested Raw data", "All Portfolios", "JobSubmitter"
            'The ‘SHARE’ field needs to be selected as ‘Yes’ if the PF states that requested RAW data is for internal Use
            If InStr(WS.[RAW_Data_Use].Value, "Internal") > 0 Then
                lstAdhocShare.Value = "Yes"
            Else
                lstAdhocShare.Value = "No"
            End If
            'All Portfolios flag is stored in Own Group Settings sheet, set worksheet to that and get value from cell
            '‘Own Group’ field needs to be selected as ‘Yes’ if the PF states that All Portfolios are selected as Yes
            Set WS = wb.Worksheets("Own Group Settings")
            If WS.Cells(5, 3).Value = "Yes" Then 'Check if portfolios is set to all
                lstAdhocOwngroup.Value = "Yes"
            Else
                lstAdhocOwngroup.Value = "No"
            End If
            'Need to construct email address which consists of FirstName + "." + LastName + "@transunion.co.uk"
            Submitter = Trim(WS.[JobSubmitter])
            'If Len(JobSubmitter) > 0 Then
            '    JobSubmitter = Replace(JobSubmitter, " ", ".") & "@transunion.com"
            'End If


    'Client = Nz(DLookup("Client", "dbo_vw_CobraAdhocDispatch", "Job_Number = '" & Form_CobraConsole!txtAdhocJobDispatch & "'"))
    Me.txtAdhocJobDispatchClient = Nz(DLookup("Client", "dbo_vw_CobraAdhocDispatch", "Job_Number = '" & Form_CobraConsole!txtAdhocJobDispatch & "'"))
    
    ' CBC 041a - Add Append Type
    Me.txtAdhocJobDispatchAppendType = Nz(DLookup("AppendType", "dbo_vw_CobraAdhocDispatch", "Job_Number = '" & Form_CobraConsole!txtAdhocJobDispatch & "'"))

    ClientManager = Nz(DLookup("Client_Manager", "dbo_vw_CobraAdhocDispatch", "Job_Number = '" & Form_CobraConsole!txtAdhocJobDispatch & "'"))
    BusinessConsultant = Nz(DLookup("Business_Consultant", "dbo_vw_CobraAdhocDispatch", "Job_Number = '" & Form_CobraConsole!txtAdhocJobDispatch & "'"))
    ProjectManager = Nz(DLookup("Project_Manager", "dbo_vw_CobraAdhocDispatch", "Job_Number = '" & Form_CobraConsole!txtAdhocJobDispatch & "'"))
    StaticEmails = "UKDataBureau@transunion.com"

    If LCase(Submitter) = LCase(ClientManager) Or LCase(Submitter) = LCase(BusinessConsultant) Or LCase(Submitter) = LCase(ProjectManager) Then
        Me.txtAdhocJobDispatchTo = ClientManager
    Else
        Me.txtAdhocJobDispatchTo = ClientManager & ";" & Submitter
    End If
    Me.txtAdhocJobDispatchCC = Replace(BusinessConsultant & ";" & ProjectManager & ";" & StaticEmails, ";;", ";")
    

    lblAdhocOutputLocation.Caption = ValCobraShareFolder & "\" & DLookup("CobraShare", "dbo_vw_CobraAdhocDispatch", "Job_Number = '" & Form_CobraConsole!txtAdhocJobDispatch & "'") & "\" & Me.txtAdhocJobDispatch
End If
End Sub

Private Sub cmdAdhocDispatchEmail_Click()

    Dim objOutlook As Object
    Dim objEmail As Object
    Dim Attach As Outlook.Attachments
    Dim AdhocClient As String
    Dim AdhocStrBody As String
    Dim AdhocManualTo As String
    Dim trueVisionAppend As Boolean
    Dim SHARESelected As String
    Dim OwnGroupSelected As String
    
    Dim DeliveryOutputLocation As String
    Dim DeliveryOutputZip As String
    Dim DeliveryOutputFile As String
    Dim DeliveryOutputRecords As String
    Dim DeliveryRejectFile As String
    Dim DeliveryRejectRecords As String
    Dim DeliveryMIFile As String
    Dim DeliveryAttachment As String
    
    Dim OutputAddrLinks As String
    Dim OutputBAI As String
    Dim OutputCCJ As String
    Dim OutputER As String
    Dim OutputSearches As String
    Dim OutputSHARE As String
    Dim OutputCIFAS As String

    Dim OutputAddrLinksCount As String
    Dim OutputBAICount As String
    Dim OutputCCJCount As String
    Dim OutputERCount As String
    Dim OutputSearchesCount As String
    Dim OutputSHARECount As String
    Dim OutputCIFASCount As String
    Dim InputRecordCount As String
    Dim IsTextFile       As Boolean
    
    Dim OutputLog As String
    Dim JobOutputFolder As String
    Dim JobNumber As String
    Dim outfile As TextStream
    Dim OutputData As String
    Dim OutputInfo() As String
    
    Dim StatsLog As String
    Dim Statsfile As TextStream
    Dim StatsData As String
    Dim StatsInfo() As String
        
    Set objOutlook = CreateObject("Outlook.Application")
    Set objEmail = objOutlook.CreateItem(0)
    
    txtAdhocJobDispatchClient.SetFocus
    AdhocClient = txtAdhocJobDispatchClient.Text
    
    txtAdhocJobDispatch.SetFocus
    If txtAdhocJobDispatch = "" Then
        MsgBox ("A job number must be specified before the job can be dispatched.")
        Exit Sub
    End If

    ' CBC 041a
    txtAdhocJobDispatchAppendType.SetFocus
    If txtAdhocJobDispatchAppendType = "Cobra" Then
        trueVisionAppend = False
    ElseIf txtAdhocJobDispatchAppendType = "TrueVision" Then
        trueVisionAppend = True
    Else
        MsgBox ("Append Type not identified - Support Required")
        Exit Sub
    End If
       
    lstAdhocShare.SetFocus
    SHARESelected = UCase(lstAdhocShare)
    
    lstAdhocOwngroup.SetFocus
    OwnGroupSelected = UCase(lstAdhocOwngroup)
       
    If SHARESelected = "" Then
        MsgBox ("SHARE data option (Yes - internal, No - Not Required or for client use) must be specified before the job can be dispatched.")
        Exit Sub
    End If
    If OwnGroupSelected = "" Then
        MsgBox ("Owngroup data option (Yes - all portfolios included, No - not all portfolios included) must be specified before the job can be dispatched.")
        Exit Sub
    End If
        
    ' read the text file created by the post processing script which containts the dispacth file details
    
    JobNumber = txtAdhocJobDispatch.Value
    
    
    If fso.FileExists(ValJobsFolder & JobNumber & "\LogFiles\" & JobNumber & "_Output.log") Then
        OutputLog = ValJobsFolder & JobNumber & "\LogFiles\" & JobNumber & "_Output.log"
        JobOutputFolder = ValJobsFolder & JobNumber & "\OutputFiles\"
    ElseIf fso.FileExists(CRLJobsFolder & JobNumber & "\LogFiles\" & JobNumber & "_Output.log") Then
        OutputLog = CRLJobsFolder & JobNumber & "\LogFiles\" & JobNumber & "_Output.log"
        JobOutputFolder = CRLJobsFolder & JobNumber & "\OutputFiles\"
    Else
        MsgBox "Unable to find Output log on CRL or VAL", vbCritical, txtQCJobNo.Caption
        Exit Sub
    End If
    
    ' read in the details for the output
    Set outfile = fso.OpenTextFile(OutputLog, ForReading)
    While Not outfile.AtEndOfStream
        OutputData = outfile.ReadLine
    Wend
    
    OutputInfo = Split(OutputData, "|")
           
    DeliveryOutputLocation = OutputInfo(0)
    DeliveryOutputZip = OutputInfo(1)
    DeliveryOutputFile = OutputInfo(2)
    DeliveryOutputRecords = OutputInfo(3)
    OutputAddrLinks = OutputInfo(4)
    OutputAddrLinksCount = OutputInfo(5)
    OutputBAI = OutputInfo(6)
    OutputBAICount = OutputInfo(7)
    OutputCCJ = OutputInfo(8)
    OutputCCJCount = OutputInfo(9)
    OutputER = OutputInfo(10)
    OutputERCount = OutputInfo(11)
    OutputSearches = OutputInfo(12)
    OutputSearchesCount = OutputInfo(13)
    OutputSHARE = OutputInfo(14)
    OutputSHARECount = OutputInfo(15)
    
    'Need to check if the output is in .csv or .txt
    If InStr(DeliveryOutputFile, ".txt") > 0 Then
        IsTextFile = True
    Else
        IsTextFile = False
    End If
    
    ' CBC 041a - Variation based on Append Type
    If trueVisionAppend Then
    
        DeliveryRejectFile = OutputInfo(16)
        DeliveryRejectRecords = OutputInfo(17)
        DeliveryMIFile = OutputInfo(18)
        DeliveryAttachment = JobOutputFolder & DeliveryMIFile
    Else
        ' COBRA Append
        OutputCIFAS = OutputInfo(16)
        OutputCIFASCount = OutputInfo(17)
        DeliveryMIFile = ""
        DeliveryAttachment = ""
    End If
    
    txtAdhocJobDispatchTo.SetFocus
    If txtAdhocJobDispatchTo = "Not found!" Then
        AdhocManualTo = InputBox("Please enter email receiver", "Send email to:")
        objEmail.To = AdhocManualTo
        If AdhocManualTo = "" Then
            Exit Sub
        End If
    Else
        objEmail.To = txtAdhocJobDispatchTo
    End If
    
    objEmail.CC = txtAdhocJobDispatchCC
    objEmail.SendUsingAccount = SendEmailAs
    objEmail.bodyformat = 2  'HTML
    
    ' CBC 041a
    If trueVisionAppend Then
        objEmail.Subject = txtAdhocJobDispatch & " - " & AdhocClient & " - TrueVision Append - Output Notification"
    Else
        objEmail.Subject = txtAdhocJobDispatch & " - " & AdhocClient & " - BSB Append - Output Notification"
    End If
    
    AdhocStrBody = "<html><body style = ""font-family:calibri,arial,helvetica,sans-serif;font-size:11pt;"">"
    AdhocStrBody = AdhocStrBody & "<p>Hi,</p>"
    AdhocStrBody = AdhocStrBody & "<p>Please find the output for this job available here : "
    AdhocStrBody = AdhocStrBody & "<a href = """ & DeliveryOutputLocation & """>" & DeliveryOutputLocation & "</a>"
    AdhocStrBody = AdhocStrBody & "</p>"
    
    If Not trueVisionAppend Then
        'Cobra doesn't generate Rejects file, need to read Stats file in ConfigFiles
    
        If fso.FileExists(ValJobsFolder & JobNumber & "\ConfigFiles\" & JobNumber & "_Stats.txt") Then
            StatsLog = ValJobsFolder & JobNumber & "\ConfigFiles\" & JobNumber & "_Stats.txt"
        ElseIf fso.FileExists(CRLJobsFolder & JobNumber & "\ConfigFiles\" & JobNumber & "_Stats.txt") Then
            StatsLog = CRLJobsFolder & JobNumber & "\ConfigFiles\" & JobNumber & "_Stats.txt"
        Else
            MsgBox "Unable to find " & JobNumber & "_Stats.txt on CRL or VAL", vbCritical, txtQCJobNo.Caption
            Exit Sub
        End If
        
        ' read in the details for the stats
        Set Statsfile = fso.OpenTextFile(StatsLog, ForReading)
        While Not Statsfile.AtEndOfStream
            StatsData = Statsfile.ReadLine
            If InStr(StatsData, "Number of records rejected") > 0 Then
                DeliveryRejectRecords = Trim(Split(StatsData, "Number of records rejected")(1))
            End If
            If InStr(StatsData, "Reformatter.RecordCount") > 0 Then
                InputRecordCount = Trim(Split(StatsData, "Reformatter.RecordCount")(1))
            End If
        Wend
        AdhocStrBody = AdhocStrBody & "Number of input records " & InputRecordCount & " <br />"
        AdhocStrBody = AdhocStrBody & "Number of records rejected " & DeliveryRejectRecords & " <br />"
    End If

    
    AdhocStrBody = AdhocStrBody & "<p>Output Zip  File: " & DeliveryOutputZip & ", which contains:</p>"

    If IsTextFile = True Then
        AdhocStrBody = AdhocStrBody & "<p>Output Data File: " & DeliveryOutputFile & " contains " & DeliveryOutputRecords & " records<br />"
    Else
        AdhocStrBody = AdhocStrBody & "<p>Output Data File: " & DeliveryOutputFile & " contains " & DeliveryOutputRecords & " records, including header record<br />"
    End If

    If trueVisionAppend Then
        AdhocStrBody = AdhocStrBody & "Rejects File: " & DeliveryRejectFile & " contains " & DeliveryRejectRecords & " records, including header record<br />"
    End If
    
    'Print Raw file names and their record counts
    If Val(OutputAddrLinksCount) > 1 Then
        If IsTextFile Then
            AdhocStrBody = AdhocStrBody & "Address links File: " & OutputAddrLinks & " contains " & OutputAddrLinksCount & " records<br />"
        Else
            AdhocStrBody = AdhocStrBody & "Address links File: " & OutputAddrLinks & " contains " & OutputAddrLinksCount & " records, including header record<br />"
        End If
    ElseIf Val(OutputAddrLinksCount) = 1 Then
        AdhocStrBody = AdhocStrBody & "Address links File: No records output <br />"
    End If
    
    If Val(OutputBAICount) > 1 Then
        If IsTextFile Then
            AdhocStrBody = AdhocStrBody & "BAI File: " & OutputBAI & " contains " & OutputBAICount & " records<br />"
        Else
            AdhocStrBody = AdhocStrBody & "BAI File: " & OutputBAI & " contains " & OutputBAICount & " records, including header record<br />"
        End If
    ElseIf Val(OutputBAICount) = 1 Then
        AdhocStrBody = AdhocStrBody & "BAI File: No records output <br />"
    End If
    
    If Val(OutputCCJCount) > 1 Then
        If IsTextFile Then
            AdhocStrBody = AdhocStrBody & "CCJ File: " & OutputCCJ & " contains " & OutputCCJCount & " records<br />"
        Else
            AdhocStrBody = AdhocStrBody & "CCJ File: " & OutputCCJ & " contains " & OutputCCJCount & " records, including header record<br />"
        End If
    ElseIf Val(OutputCCJCount) = 1 Then
        AdhocStrBody = AdhocStrBody & "CCJ File: No records output <br />"
    End If
    
    If Val(OutputERCount) > 1 Then
        If IsTextFile Then
            AdhocStrBody = AdhocStrBody & "ER File: " & OutputER & " contains " & OutputERCount & " records<br />"
        Else
            AdhocStrBody = AdhocStrBody & "ER File: " & OutputER & " contains " & OutputERCount & " records, including header record<br />"
        End If
    ElseIf Val(OutputERCount) = 1 Then
        AdhocStrBody = AdhocStrBody & "ER File: No records output<br />"
    End If
    
    If Val(OutputSearchesCount) > 1 Then
        If IsTextFile Then
            AdhocStrBody = AdhocStrBody & "Searches File: " & OutputSearches & " contains " & OutputSearchesCount & " records<br />"
        Else
            AdhocStrBody = AdhocStrBody & "Searches File: " & OutputSearches & " contains " & OutputSearchesCount & " records, including header record<br />"
        End If
    ElseIf Val(OutputSearchesCount) = 1 Then
        AdhocStrBody = AdhocStrBody & "Searches File: No records output<br />"
    End If
    
    If Val(OutputSHARECount) > 1 Then
        If IsTextFile Then
            AdhocStrBody = AdhocStrBody & "SHARE File: " & OutputSHARE & " contains " & OutputSHARECount & " records<br />"
        Else
            AdhocStrBody = AdhocStrBody & "SHARE File: " & OutputSHARE & " contains " & OutputSHARECount & " records, including header record<br />"
        End If
    ElseIf Val(OutputSHARECount) = 1 Then
        AdhocStrBody = AdhocStrBody & "SHARE File: No records output<br />"
    End If
        
    ' CBC 041a
    If trueVisionAppend Then
        AdhocStrBody = AdhocStrBody & "Report File: " & DeliveryMIFile & "</p>"
    Else
    'Cobra append
        If Val(OutputCIFASCount) > 1 Then
            If IsTextFile Then
                AdhocStrBody = AdhocStrBody & "CIFAS File: " & OutputCIFAS & " contains " & OutputCIFASCount & " records<br />"
            Else
                AdhocStrBody = AdhocStrBody & "CIFAS File: " & OutputCIFAS & " contains " & OutputCIFASCount & " records, including header record<br />"
            End If
        ElseIf Val(OutputCIFASCount) = 1 Then
            AdhocStrBody = AdhocStrBody & "CIFAS File: No records output<br />"
        End If
    End If
    
    If (SHARESelected = "YES" And OwnGroupSelected = "YES") Then
        AdhocStrBody = AdhocStrBody & "<p><b><body style = ""font-family:calibri,arial,helvetica,sans-serif;font-size:11pt;color:red"">PLEASE NOTE: This data is for Internal Analysis Only and MUST NOT leave the building. These Outputs contains Supplier Name and Account Number information, which cannot be provided to clients under any circumstances.</body></b></p>"
    ElseIf SHARESelected = "YES" Then
        AdhocStrBody = AdhocStrBody & "<p><b><body style = ""font-family:calibri,arial,helvetica,sans-serif;font-size:11pt;color:red"">PLEASE NOTE: This data is for Internal Analysis Only and MUST NOT leave the building.</body></b></p>"
    ElseIf OwnGroupSelected = "YES" Then
        AdhocStrBody = AdhocStrBody & "<p><b><body style = ""font-family:calibri,arial,helvetica,sans-serif;font-size:11pt;color:red"">PLEASE NOTE: This data is for Internal Analysis Only and MUST NOT leave the building. These Outputs contains Supplier Name and Account Number information, which cannot be provided to clients under any circumstances.</body></b></p>"
    End If
        
    AdhocStrBody = AdhocStrBody & "<p>Questions, queries, issues and additional requirements or changes in relation to this job should be directed to the Data Bureau team using Test Track Pro by filling in the ""Complaint Tracking"" section.</p>"
    AdhocStrBody = AdhocStrBody & "<p>Thank you,<br />Data Bureau</p>"
    AdhocStrBody = AdhocStrBody & "</body></html>"
    
    ' CBC 041a - attach report
    If trueVisionAppend Then
        Set Attach = objEmail.Attachments
        Attach.Add (DeliveryAttachment)
    End If
    objEmail.HTMLBody = AdhocStrBody
    objEmail.Display
    
    Call cmdAdhocDispatchClear_Click
    
End Sub
Private Sub Command650_Click()
On Error GoTo Err_Command650_Click


    Screen.PreviousControl.SetFocus
    DoCmd.FindNext

Exit_Command650_Click:
    Exit Sub

Err_Command650_Click:
    MsgBox Err.Description
    Resume Exit_Command650_Click
    
End Sub

Private Sub GenerateQCChecksSASAdHoc()

' File/Folder Stuff
Dim objFSO As Object
Set objFSO = CreateObject("Scripting.FileSystemObject")

' For testing; add file select dialogs on Console
Dim strParameterFormPath As String
Dim strConfigFilePath As String
Dim strSASTemplatePath As String

' Define the variables to retrieve from parameter form and config
Dim strCobraSharePath As String ' Not on form
Dim strOutputZipPath As String ' Not on form
Dim strAnalyticsPath As String ' Not on form
Dim strConfigFilename As String ' Not on form

Dim strBSBFilename As String ' Get from config

Dim strFileType As String ' Fixed Length/Delimited
Dim strExtension As String ' Not on form, derive from strFileType
Dim strDelimiter As String ' Free text
Dim strPipe As String ' Not on form, derive from strDelimiter ("|" or "pipe")

Dim strDefaultValues As String ' Character (e.g. ND) & Numeric (e.g. -999997) OR Character Only (e.g. ND)
Dim strHeader As String ' Yes/No
Dim strJobCode As String ' JobNumber
Dim strRetroVersion As String ' RetroVersion 7.1, 7.2, 7.3

Dim strBSBTypes As String ' Build from the following
Dim strAddressLinks As String ' Declared Addresses Only (BSB Type 12) OR Declared & Undeclared Addresses (BSB Type 14) OR Both BSB Types 12 & 14 (Two Output Files) ' Resolve to BSBType12 or BSBType14
Dim strBSBType25 As String ' Yes/No
Dim strBSBType26 As String ' Yes/No
Dim strBSBType27 As String ' Yes/No
Dim strBSBType2829 As String ' Yes/No

Dim strInputVolume As String ' integer
Dim strDataReciprocity As String ' Full SHARE Data OR Default & Delinquent Data OR Default Data OR Public Data (No SHARE) ' Resolve to Full/Delinquent/Default/Public

Dim strCIFAS As String ' Yes/No
Dim strCAMEO As String ' Yes/No
Dim strGeoRisk As String ' Yes/No
Dim strDeceased As String ' Yes/No
Dim strICH As String ' Yes/No
Dim strAPACS As String ' Yes/No

Dim strRawFiles As String ' Yes/No ' Derive from below
Dim strRawSHARE As String ' No Raw Data OR Standard Raw Data OR Analytical Raw Data
Dim strRawSHAREMonthsHistory As String ' 1, 12, 24, 36, 48, 60, 72
Dim strRawAddressLinks As String ' No Raw Data OR Standard Raw Data OR Analytical Raw Data
Dim strRawBAI As String ' No Raw Data OR Standard Raw Data OR Analytical Raw Data
Dim strRawCCJ As String ' No Raw Data OR Standard Raw Data OR Analytical Raw Data
Dim strRawCIFAS As String ' No Raw Data OR Standard Raw Data OR Analytical Raw Data
Dim strRawER As String ' No Raw Data OR Standard Raw Data OR Analytical Raw Data
Dim strRawSearches As String ' No Raw Data OR Standard Raw Data OR Analytical Raw Data
Dim strRawFilename As String ' Get from config, or from BSB filename (remove .bsb), should be the same
Dim strRawOutputType As String ' Standard = std, Analytical = Full; derived from above strRaw... strings

Dim strOwnGroup As String

strParameterFormPath = "Y:\Production\Neptune\Projects - DO NOT DELETE\COBRA QC\CDA103817\ConfigFiles\CDA103817 Batch BSB Request Form v1.11.xlsx"
strConfigFilePath = "Y:\Production\Neptune\Projects - DO NOT DELETE\COBRA QC\CDA103817\ConfigFiles\CDA103817_Append.config"
strSASTemplatePath = "Y:\Production\Neptune\Projects - DO NOT DELETE\COBRA QC\CDA103817\ConfigFiles\BSB_Control_V12_Template.sas"

If Not GetParameterFormValuesForQC(strParameterFormPath, _
    strJobCode, strInputVolume, strRetroVersion, _
    strFileType, strExtension, strDelimiter, strDefaultValues, strHeader, _
    strAddressLinks, strBSBType25, strBSBType26, strBSBType27, strBSBType2829, _
    strDataReciprocity, strCIFAS, strCAMEO, strGeoRisk, strDeceased, strICH, strAPACS, strOwnGroup, _
    strRawSHARE, strRawBAI, strRawCCJ, strRawAddressLinks, strRawER, strRawSearches, strRawCIFAS, strRawSHAREMonthsHistory) Then
    
    MsgBox "Error getting values from parameter form", vbCritical
End If

' Get remaining info from config file
Dim xmlConfig As Object
Set xmlConfig = CreateObject("Msxml2.DOMDocument.3.0")

If Not objFSO.FileExists(strConfigFilePath) Then
    MsgBox "Config file selected does not exist or is not accessible.", vbCritical
    Exit Sub
End If

xmlConfig.Load strConfigFilePath

strBSBFilename = xmlConfig.SelectSingleNode("/RetroServiceConfig/SystemConfig/BSBGenerator/OutputFile/OutputFilename").Text
strRawFilename = xmlConfig.SelectSingleNode("/RetroServiceConfig/SystemConfig/BSBGenerator/OutputFile/RawOutputFile/OutputFilename").Text
strAddressLinks = xmlConfig.SelectSingleNode("/RetroServiceConfig/SystemConfig/BSBGenerator/CallReport/GeneralBSBSettings/AddressLinks").Text

' Set remaining params

' Retro version must be 71 (for 7.1) or 72 (for 7.2 and 7.3)
If strRetroVersion = "7.1" Then
    strRetroVersion = "71"
ElseIf strRetroVersion = "7.2" Or strRetroVersion = "7.3" Then
    strRetroVersion = "72"
Else
    strRetroVersion = ""
End If

' Separate variable for Pipe delimited files
strPipe = "N"
If strFileType = "Fixed Length" Then
    strFileType = "Fixed"
ElseIf strFileType = "Delimited" Then
    If strDelimiter = "|" Or LCase(strDelimiter) = "pipe" Then
        strFileType = "Pipe"
        strPipe = "Y"
    Else
        strFileType = "Delim"
    End If
End If

' Default the header value when fixed width?
If strHeader = "" Then strHeader = "No"

' Default values
If strDefaultValues = "Character (e.g. ND) & Numeric (e.g. -999997)" Then
    strDefaultValues = "Charnum"
ElseIf strDefaultValues = "Character Only (e.g. ND)" Then
    strDefaultValues = "Char"
End If

' Data Reciprocity
Select Case strDataReciprocity
    Case "Full SHARE Data"
        strDataReciprocity = "Full"
    Case "Default & Delinquent Data"
        strDataReciprocity = "Delinquent"
    Case "Default Data"
        strDataReciprocity = "Default"
    Case "Public Data (No SHARE)"
        strDataReciprocity = "Public"
End Select

strExtension = LCase(objFSO.GetExtensionName(strBSBFilename)) ' Not on form, derive from strFileType or Filename; should be txt or csv

' BSBTypes must have either 12 or 14, can have 25/26/27/28/29
strBSBTypes = Right(strAddressLinks, 2) ' 12 or 14
If strBSBType25 = "Yes" Then strBSBTypes = strBSBTypes & " 25"
If strBSBType26 = "Yes" Then strBSBTypes = strBSBTypes & " 26"
If strBSBType27 = "Yes" Then strBSBTypes = strBSBTypes & " 27"
If strBSBType2829 = "Yes" Then strBSBTypes = strBSBTypes & " 28 29"

' Raw files and type
If (strRawSHARE = "No Raw Data" And strRawBAI = "No Raw Data" And strRawCCJ = "No Raw Data" And strRawAddressLinks = "No Raw Data" And strRawER = "No Raw Data" And strRawSearches = "No Raw Data" And strRawCIFAS = "No Raw Data") Then
    strRawFiles = "No"
    strRawOutputType = ""
ElseIf (strRawSHARE = "Analytical Raw Data" Or strRawBAI = "Analytical Raw Data" Or strRawCCJ = "Analytical Raw Data" Or strRawAddressLinks = "Analytical Raw Data" Or strRawER = "Analytical Raw Data" Or strRawSearches = "Analytical Raw Data" Or strRawCIFAS = "Analytical Raw Data") Then
    strRawFiles = "Yes"
    strRawOutputType = "Full"
ElseIf (strRawSHARE = "Standard Raw Data" Or strRawBAI = "Standard Raw Data" Or strRawCCJ = "Standard Raw Data" Or strRawAddressLinks = "Standard Raw Data" Or strRawER = "Standard Raw Data" Or strRawSearches = "Standard Raw Data" Or strRawCIFAS = "Standard Raw Data") Then
    strRawFiles = "Yes"
    strRawOutputType = "std"
Else
    strRawFiles = "No"
    strRawOutputType = ""
End If

' Own Group can either be Include, Exclude or empty on the parameter form, set to Yes if it's Include or Exclude
If strOwnGroup = "" Then
    strOwnGroup = "No"
Else
    strOwnGroup = "Yes"
End If


''''''''''''''''''''''''''''''''
'                              '
'   VALUES FOR TESTING ONLY!   '
'                              '
''''''''''''''''''''''''''''''''

strCobraSharePath = "\\NotARealServer\CobraShare\MadeUpClientName\FakeJobNumber\Output\"
strOutputZipPath = "\\NotARealServer\CobraShare\MadeUpClientName\FakeJobNumber\Output\FakeJobNumber_SNT.zip"
strAnalyticsPath = "H:\Data Bureau\MadeUpClientName\"
strConfigFilename = objFSO.GetFileName(strConfigFilePath)

''''''''''''''''''''''''''''''''
'                              '
'   VALUES FOR TESTING ONLY!   '
'                              '
''''''''''''''''''''''''''''''''

' Read in template file and make replacements
Dim strSASTemplate As String
Dim iFile As Integer: iFile = FreeFile
            
Open strSASTemplatePath For Input As #iFile
strSASTemplate = Input(LOF(iFile), iFile)
Close #iFile

strSASTemplate = Replace(strSASTemplate, "<<dbPath>>", strCobraSharePath)
strSASTemplate = Replace(strSASTemplate, "<<dbZip>>", Replace(objFSO.GetFileName(strOutputZipPath), ".zip", ""))
strSASTemplate = Replace(strSASTemplate, "<<sPath>>", strAnalyticsPath)
strSASTemplate = Replace(strSASTemplate, "<<sInput>>", Left(objFSO.GetFileName(strBSBFilename), InStr(1, objFSO.GetFileName(strBSBFilename), ".bsb") + 3))
strSASTemplate = Replace(strSASTemplate, "<<sOutput>>", Replace(strConfigFilename, ".config", ""))
strSASTemplate = Replace(strSASTemplate, "<<FILETYPE>>", strFileType)
strSASTemplate = Replace(strSASTemplate, "<<DEFVAL>>", strDefaultValues)
strSASTemplate = Replace(strSASTemplate, "<<Header>>", strHeader)
strSASTemplate = Replace(strSASTemplate, "<<sJobCode>>", strJobCode)
strSASTemplate = Replace(strSASTemplate, "<<Version>>", Replace(strRetroVersion, ".", ""))
strSASTemplate = Replace(strSASTemplate, "<<BSBTYPES>>", strBSBTypes) ' Build this string
strSASTemplate = Replace(strSASTemplate, "<<RECORDS>>", strInputVolume)
strSASTemplate = Replace(strSASTemplate, "<<RECIP>>", strDataReciprocity)
strSASTemplate = Replace(strSASTemplate, "<<CIFAS>>", strCIFAS)
strSASTemplate = Replace(strSASTemplate, "<<CAMEO>>", strCAMEO)
strSASTemplate = Replace(strSASTemplate, "<<GRISK>>", strGeoRisk)
strSASTemplate = Replace(strSASTemplate, "<<DECEASED>>", strDeceased)
strSASTemplate = Replace(strSASTemplate, "<<ICH>>", strICH)
strSASTemplate = Replace(strSASTemplate, "<<APACS>>", strAPACS)
strSASTemplate = Replace(strSASTemplate, "<<OWN>>", strOwnGroup)
strSASTemplate = Replace(strSASTemplate, "<<sTYPE>>", Right(strAddressLinks, 2)) ' Get type from config?
strSASTemplate = Replace(strSASTemplate, "<<sRawFiles>>", strRawFiles)
strSASTemplate = Replace(strSASTemplate, "<<sRunInput>>", Left(objFSO.GetFileName(strRawFilename), InStr(1, objFSO.GetFileName(strRawFilename), ".") - 1))
strSASTemplate = Replace(strSASTemplate, "<<sExtension>>", strExtension)
strSASTemplate = Replace(strSASTemplate, "<<sPipe>>", strPipe)
strSASTemplate = Replace(strSASTemplate, "<<sMonth>>", strRawSHAREMonthsHistory)
strSASTemplate = Replace(strSASTemplate, "<<sRun>>", strRawOutputType)

' Save the updated SAS script
Dim strSASScriptPath As String
strSASScriptPath = Replace(strSASTemplatePath, "_Template.sas", "_QCChecks.sas")

Open strSASScriptPath For Output As #iFile
Print #iFile, strSASTemplate
Close #iFile

If strSASTemplate Like "*<<*>>*" Then
    MsgBox "There appears to be one or more paceholders that were not updated, review generate script before executing.", vbExclamation
End If

End Sub

Private Function GetParameterFormValuesForQC(ByRef strParameterFormPath, _
    ByRef strJobCode, ByRef strInputVolume, ByRef strRetroVersion, ByRef strFileType, ByRef strExtension, ByRef strDelimiter, _
    ByRef strDefaultValues, ByRef strHeader, ByRef strAddressLinks, ByRef strBSBType25, ByRef strBSBType26, ByRef strBSBType27, ByRef strBSBType2829, ByRef strDataReciprocity, _
    ByRef strCIFAS, ByRef strCAMEO, ByRef strGeoRisk, ByRef strDeceased, ByRef strICH, ByRef strAPACS, ByRef strOwnGroup, _
    ByRef strRawSHARE, ByRef strRawBAI, ByRef strRawCCJ, ByRef strRawAddressLinks, ByRef strRawER, ByRef strRawSearches, ByRef strRawCIFAS, ByRef strRawSHAREMonthsHistory) As Boolean

Dim objFSO As Object
Set objFSO = CreateObject("Scripting.FileSystemObject")

' Create an Excel object and open the parameter form
' Must have Excel Object Library ticked in references
Dim objExcel As Object
Set objExcel = CreateObject("Excel.Application")

If objFSO.FileExists(strParameterFormPath) Then
    Dim objParameterForm As Object
    Set objParameterForm = objExcel.Workbooks.Open(strParameterFormPath, , True)
Else
    MsgBox "Parameter form selected does not exist or is not accessible." & vbCrLf & strParameterFormPath, vbCritical
    Set objExcel = Nothing
    GetParameterFormValuesForQC = False
    Exit Function
End If

With objParameterForm.Sheets("Batch BSB Parameter Form")
    strJobCode = .Range("JobNumber")
    strInputVolume = .Range("InputVolume")
    strRetroVersion = .Range("RetroVersion")
    
    strFileType = .Range("OutputFileType")
    strExtension = .Range("OutputFileType")
    strDelimiter = .Range("OutputDelimiter")
    strDefaultValues = .Range("OutputDefaultValues")
    strHeader = .Range("OutputHeader")
    
    ' strAddressLinks = .Range("AddressLinks") ' Take from config instead as might be 'Both' in param form
    strBSBType25 = .Range("BSBType25")
    strBSBType26 = .Range("BSBType26")
    strBSBType27 = .Range("BSBType27")
    strBSBType2829 = .Range("BSBType2829")
    
    strDataReciprocity = .Range("DataReciprocity")
    strCIFAS = .Range("CifasMember")
    strCAMEO = .Range("IncludeCAMEO")
    strGeoRisk = .Range("IncludeGeoRisk")
    strDeceased = .Range("IncludeDeceased")
    strICH = .Range("IncludeICH")
    strAPACS = .Range("IncludeAPACS")
    
    strRawSHARE = .Range("RawSHARE")
    strRawBAI = .Range("RawBAI")
    strRawCCJ = .Range("RawCCJ")
    strRawAddressLinks = .Range("RawAddressLinks")
    strRawER = .Range("RawER")
    strRawSearches = .Range("RawSearches")
    strRawCIFAS = .Range("RawCIFAS")
    strRawSHAREMonthsHistory = .Range("RawSHAREMonthsHistory")
End With

With objParameterForm.Sheets("Own Group Settings")
    strOwnGroup = .Range("OwnGroup")
End With

objParameterForm.Close
Set objParameterForm = Nothing
Set objExcel = Nothing

GetParameterFormValuesForQC = True

End Function

Private Sub GenerateQCChecksSASRegular(ByVal strJobNo As String, ByVal strSASTemplatePath As String, Optional ByVal strConfigFilePath As String)

Dim dtRunDate As Date
dtRunDate = ParseRunDate(txtQCJobNo.Caption)

' CBC 043 - get the Server we are running on.
Dim CobraEnvironment As String
CobraEnvironment = Replace(strSASTemplatePath, "\\", "")
CobraEnvironment = Left(CobraEnvironment, InStr(CobraEnvironment, "\") - 1)

' Read in template file and make replacements
Dim strSASTemplate As String
Dim iFile As Integer: iFile = FreeFile
            
Open strSASTemplatePath For Input As #iFile
strSASTemplate = Input(LOF(iFile), iFile)
Close #iFile

strSASTemplate = Replace(strSASTemplate, "<<RunDateYYYYMM>>", Format(dtRunDate, "yyyyMM"))
strSASTemplate = Replace(strSASTemplate, "<<RunDateYYYYMMDD>>", Format(dtRunDate, "yyyyMMdd"))
strSASTemplate = Replace(strSASTemplate, "<<RunDateMMMyy>>", UCase(Format(dtRunDate, "MMMyy")))
strSASTemplate = Replace(strSASTemplate, "<<RunDateYYMM>>", Format(dtRunDate, "yyMM"))
strSASTemplate = Replace(strSASTemplate, "<<RunDateMMM>>", UCase(Format(dtRunDate, "MMM")))

strSASTemplate = Replace(strSASTemplate, "<<NextMonthYYYYMMDD>>", Format(DateAdd("M", 1, dtRunDate), "yyyyMMdd"))
strSASTemplate = Replace(strSASTemplate, "<<NextMonthMMYYYY>>", Format(DateAdd("M", 1, dtRunDate), "MMyyyy"))
strSASTemplate = Replace(strSASTemplate, "<<NextMonthDDMMYY>>", Format(DateAdd("M", 1, dtRunDate), "ddMMyy"))

' CBC 043 - Update Media Server
strSASTemplate = Replace(strSASTemplate, "<<MediaServer>>", CobraEnvironment)


If Not txtBespokeField1Value.Value = "" Then
    strSASTemplate = Replace(strSASTemplate, txtBespokeField1Name.Value, txtBespokeField1Value.Value)
End If
If Not txtBespokeField2Value.Value = "" Then
    strSASTemplate = Replace(strSASTemplate, txtBespokeField2Name.Value, txtBespokeField2Value.Value)
End If

Dim strRegexOut As String
strRegexOut = RegexMatch(strSASTemplate, "(<<([^<])*>>)")
If Len(strRegexOut) > 0 Then
    MsgBox "A placeholder was not updated: " & strRegexOut & "; review template and try again. SAS Script has not been saved.", vbExclamation, strJobNo
    Exit Sub
End If

' Save the updated SAS script
Dim strSASScriptPath As String
strSASScriptPath = Replace(strSASTemplatePath, "_Template.sas", "_QCChecks.sas")

Set fso = CreateObject("Scripting.FileSystemObject")

If fso.FileExists(strSASScriptPath) Then
    Select Case MsgBox(strSASScriptPath & vbCrLf & vbCrLf & "A SAS script already exists for this job, overwrite?", vbExclamation + vbYesNo, txtQCJobNo.Caption)
        Case vbYes
            ' Do nothing, or maybe delete the existing file?
        Case vbNo
            Exit Sub ' without saving the document
    End Select
End If

Open strSASScriptPath For Output As #iFile
Print #iFile, strSASTemplate
Close #iFile

MsgBox "SAS Script has been successfully created: " & vbCrLf & vbCrLf & strSASScriptPath, vbInformation, txtQCJobNo.Caption

End Sub

Function ParseRunDate(OriginalString As String)

Dim Pos As Integer
Dim WorkString As String

WorkString = OriginalString

Do
    Pos = InStr(WorkString, "_")
    If Pos Then
        WorkString = Mid(WorkString, Pos + 1)
    End If
Loop While Pos > 0

If Len(WorkString) = 6 Then
    WorkString = WorkString & "01"
End If

If IsNumeric(WorkString) Then
    ParseRunDate = CDate(Format(Left(WorkString, 8), "0000-00-00"))
Else
    ParseRunDate = ""
End If

End Function

Function RegexMatch(ByVal strInput As String, ByVal strPattern As String) As String

Dim Regex As Object
Set Regex = CreateObject("VBScript.RegExp")

Dim AllMatches()
Dim rMatch As Object
Dim i As Long

With Regex
    .Pattern = strPattern
    .Global = True
    .IgnoreCase = True
    If .Test(strInput) Then
        For Each rMatch In .Execute(strInput)
            ReDim Preserve AllMatches(i)
            AllMatches(i) = rMatch.Value
            i = i + 1
        Next
    End If
End With

RegexMatch = Join(AllMatches, ";")

End Function
'Function wsExists(wsName As String, xlbSource As Workbook) As Boolean
'
'    Dim WS As Worksheet
'    Dim Result As Boolean
'
'    Result = False
'    For Each WS In xlbSource.Sheets
'        If LCase(WS.Name) = LCase(wsName) Then
'            Result = True
'            Exit For
'        End If
'    Next WS
'
'    wsExists = Result
'
'End Function

Private Sub Command774_Click()
On Error GoTo Err_Command774_Click


    Screen.PreviousControl.SetFocus
    DoCmd.FindNext

Exit_Command774_Click:
    Exit Sub

Err_Command774_Click:
    MsgBox Err.Description
    Resume Exit_Command774_Click
    
End Sub
Private Sub Command779_Click()
On Error GoTo Err_Command779_Click


    Screen.PreviousControl.SetFocus
    DoCmd.FindNext

Exit_Command779_Click:
    Exit Sub

Err_Command779_Click:
    MsgBox Err.Description
    Resume Exit_Command779_Click
    
End Sub
Private Sub Command780_Click()
On Error GoTo Err_Command780_Click


    Screen.PreviousControl.SetFocus
    DoCmd.FindNext

Exit_Command780_Click:
    Exit Sub

Err_Command780_Click:
    MsgBox Err.Description
    Resume Exit_Command780_Click
    
End Sub
Private Sub Command781_Click()
On Error GoTo Err_Command781_Click


    Screen.PreviousControl.SetFocus
    DoCmd.FindNext

Exit_Command781_Click:
    Exit Sub

Err_Command781_Click:
    MsgBox Err.Description
    Resume Exit_Command781_Click
    
End Sub
Private Sub Command783_Click()
On Error GoTo Err_Command783_Click


    Screen.PreviousControl.SetFocus
    DoCmd.FindNext

Exit_Command783_Click:
    Exit Sub

Err_Command783_Click:
    MsgBox Err.Description
    Resume Exit_Command783_Click
    
End Sub
Private Sub Command784_Click()
On Error GoTo Err_Command784_Click


    Screen.PreviousControl.SetFocus
    DoCmd.FindNext

Exit_Command784_Click:
    Exit Sub

Err_Command784_Click:
    MsgBox Err.Description
    Resume Exit_Command784_Click
    
End Sub
Private Sub Command817_Click()
On Error GoTo Err_Command817_Click


    Screen.PreviousControl.SetFocus
    DoCmd.FindNext

Exit_Command817_Click:
    Exit Sub

Err_Command817_Click:
    MsgBox Err.Description
    Resume Exit_Command817_Click
    
End Sub
Private Sub Command818_Click()
On Error GoTo Err_Command818_Click


    Screen.PreviousControl.SetFocus
    DoCmd.FindNext

Exit_Command818_Click:
    Exit Sub

Err_Command818_Click:
    MsgBox Err.Description
    Resume Exit_Command818_Click
    
End Sub

Public Sub GetParameterFormInfo(EmailID As String, ParameterFormName As String)

Dim mail As MailItem
Dim attachment
Dim attachmentPath As String
Dim attachmentPathFilename As String

Dim ClientName As String
Dim JobNumber As String
Dim FileLocation As String
Dim Filename As String
Dim FileSize As String
Dim RequestType As String
Dim SubmissionStatus As String
Dim InputFileFound As String
Dim FilePath As String

Dim FileNameCurrent As String
Dim FileLocationCurrent As String
Dim FileSizeCurrent As String
Dim FileID As String
Dim strSQL As String
Dim rst As Recordset

Form_Status.Status = "Getting parameter form details..."
Form_Status.Visible = True

attachmentPath = Environ("TEMP") + "\"
attachmentPathFilename = attachmentPath & ParameterFormName

'0. Get the email object
'Set mail = GetEmailObject(EmailID)
If IsNull(mail) Then
    Form_Status.Visible = False
    Exit Sub
End If
'1. Download parameter form to user temp location
'Call DownloadAttachment(mail, ParameterFormName, attachmentPath)
'2. Check if download successfull, Collect details from parameter form
If fso.FileExists(attachmentPathFilename) Then
    Call ReadParameterForm(attachmentPathFilename, ClientName, JobNumber, FileLocation, Filename, FileSize, RequestType, SubmissionStatus)
Else
    MsgBox "Failed to fetch Parameter Form attachment from email"
    Form_Status.Visible = False
    Exit Sub
End If
'3. Confirm if file from parameter form has been found either in data in or EFT
If Not Right(FileLocation, 1) = "\" Then
    FileLocation = Trim(FileLocation) & "\"
End If
FilePath = Trim(FileLocation) & Trim(Filename)
'InputFileFound = FileFound(FilePath, FileID) 'If not found FileFound -> "", else "DataIn" or "EFT"

'4. Display in seperate page - unhide, populate fields
'Clear the page labels
'Call ClearParameterFormDetails
'Unhide the page and set focus
pgParameterFormDetails.Visible = True
pgParameterFormDetails.SetFocus
'setupJobBtn.Enabled = False

'Set values from Parameter Form
lblPFName.Caption = ParameterFormName
lblPFStatus.Caption = SubmissionStatus
lblPFJobNumber.Caption = JobNumber
lblPFClientName.Caption = ClientName
lblPFRequestType.Caption = RequestType
lblPFInputFolder.Caption = FileLocation
'lblPFInputFile.Caption = FileName
'lblPFInputRecords.Caption = FileSize



Form_Status.Status = "Checking if file was found..."
Form_Status.Visible = True

'display if found in data in or eft or neither
'If file found enable setup button
If InputFileFound = "EFT" Then
    strSQL = "select * from dbo.COBRA_File where FileID = '" & FileID & "'"
    Set rst = New Recordset
    rst.Open strSQL, db21, adOpenForwardOnly, adLockReadOnly
    If Not rst.EOF Then
        'lblPFMatched.Caption = "File Match Found"
        lblPFMatchedFileName.Caption = rst("FileName")
        lblPFMatchedFolder.Caption = rst("Folder")
        'lblFileID.Caption = FileID
        If rst("RowCount") = "0" Then
            lblPFMatchedRecords.Caption = "Row Count unavailable"
        Else
            lblPFMatchedRecords.Caption = rst("RowCount")
        End If
    End If
    rst.Close
    'setupJobBtn.Enabled = True
ElseIf InputFileFound = "DataIn" Then
   ' lblPFMatched.Caption = "File Match Found"
    lblPFMatchedFileName.Caption = Filename
    lblPFMatchedFolder.Caption = FileLocation
    lblPFMatchedRecords.Caption = "Row Count unavailable"
    'setupJobBtn.Enabled = True
End If
Form_Status.Visible = False

End Sub

Public Sub ReadParameterForm(PFPath, ByRef ClientName As String, ByRef JobNumber As String, ByRef FileLocation As String, ByRef Filename As String, ByRef FileSize As String, ByRef RequestType As String, ByRef SubmissionStatus As String)

Dim xlbSource As Workbook
Dim xlsSource As Worksheet

Set xlbSource = Workbooks.Open(PFPath, , True)
Set xlsSource = xlbSource.Worksheets("BSB & TrueVision Parameter Form")

ClientName = xlsSource.[ClientName]
JobNumber = xlsSource.[JobNumber]
FileLocation = xlsSource.[InputFilePath]
'TODO Update to named cells with next PF release
Filename = xlsSource.Cells(28, 3)
FileSize = xlsSource.[InputVolume]
RequestType = xlsSource.[RequestVersion]
SubmissionStatus = xlsSource.Cells(24, 3)

'xlbSource.Close False)

End Sub

Public Sub QuickSortArray(ByRef SortArray As Variant, Optional lngMin As Long = -1, Optional lngMax As Long = -1, Optional lngColumn As Long = 0)
    On Error Resume Next

    Dim i As Long
    Dim j As Long
    Dim varMid As Variant
    Dim arrRowTemp As Variant
    Dim lngColTemp As Long

    If IsEmpty(SortArray) Then
        Exit Sub
    End If
    If InStr(TypeName(SortArray), "()") < 1 Then  'IsArray() is somewhat broken: Look for brackets in the type name
        Exit Sub
    End If
    If lngMin = -1 Then
        lngMin = LBound(SortArray, 1)
    End If
    If lngMax = -1 Then
        lngMax = UBound(SortArray, 1)
    End If
    If lngMin >= lngMax Then    ' no sorting required
        Exit Sub
    End If

    i = lngMin
    j = lngMax

    varMid = Empty
    varMid = SortArray((lngMin + lngMax) \ 2, lngColumn)

    ' We  send 'Empty' and invalid data items to the end of the list:
    If IsObject(varMid) Then  ' note that we don't check isObject(SortArray(n)) - varMid *might* pick up a valid default member or property
        i = lngMax
        j = lngMin
    ElseIf IsEmpty(varMid) Then
        i = lngMax
        j = lngMin
    ElseIf IsNull(varMid) Then
        i = lngMax
        j = lngMin
    ElseIf varMid = "" Then
        i = lngMax
        j = lngMin
    ElseIf VarType(varMid) = vbError Then
        i = lngMax
        j = lngMin
    ElseIf VarType(varMid) > 17 Then
        i = lngMax
        j = lngMin
    End If

    While i <= j
        While SortArray(i, lngColumn) < varMid And i < lngMax
            i = i + 1
        Wend
        While varMid < SortArray(j, lngColumn) And j > lngMin
            j = j - 1
        Wend

        If i <= j Then
            ' Swap the rows
            ReDim arrRowTemp(LBound(SortArray, 2) To UBound(SortArray, 2))
            For lngColTemp = LBound(SortArray, 2) To UBound(SortArray, 2)
                arrRowTemp(lngColTemp) = SortArray(i, lngColTemp)
                SortArray(i, lngColTemp) = SortArray(j, lngColTemp)
                SortArray(j, lngColTemp) = arrRowTemp(lngColTemp)
            Next lngColTemp
            Erase arrRowTemp

            i = i + 1
            j = j - 1
        End If
    Wend

    If (lngMin < j) Then Call QuickSortArray(SortArray, lngMin, j, lngColumn)
    If (i < lngMax) Then Call QuickSortArray(SortArray, i, lngMax, lngColumn)
    
End Sub

Private Sub Command862_Click()
On Error GoTo Err_Command862_Click


    Screen.PreviousControl.SetFocus
    DoCmd.FindNext

Exit_Command862_Click:
    Exit Sub

Err_Command862_Click:
    MsgBox Err.Description
    Resume Exit_Command862_Click
    
End Sub
Private Sub Command863_Click()

Dim rs As New ADODB.Recordset
Dim cnn As New ADODB.Connection
Dim sqlstr As String

sqlstr = "select top 1 * from Cobra_Config"

cnn.ConnectionString = "Provider=SQLNCLI11;Persist Security Info=False;Extended Properties=""DSN=Main;Description=Main Database;APP=Visual Basic;Trusted_Connection=Yes"";server=pllwinlvsql002\mb21,1433;database=DataBureauDataLoadAudit;driver={SQL Server}"
cnn.Open

rs.Open sqlstr, cnn
rs.Close

MsgBox (sqlstr)

cnn.Close
Set cnn = Nothing
Set rs = Nothing
    
End Sub
